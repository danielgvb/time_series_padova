ggplot(df_merged_d, aes(x = date)) +
geom_line(aes(y = exp(bar), color = "Actual Bar Sales"), size = 1) +
geom_line(aes(y = exp(predicted_food0), color = "Model 0"), linetype = "dashed", size = 1) +
geom_line(aes(y = exp(predicted_food1), color = "Model 1"), linetype = "dotted", size = 1) +
geom_line(aes(y = exp(predicted_food2), color = "Model 2 Stepwise"), linetype = "dotdash", size = 1) +
labs(title = "Actual vs Predicted Bar Sales for All Models",
x = "Date", y = "Bar Sales", color = "Legend") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 6 Non Linear Models----------------
## 6.1 Difussion Models----------------
## 6.1.1 BASS Model Food--------------
### Monthly---------
# simple Bass model
bm_f_m<-BM(food_m_ts,display = T) # show graphical view of results / display = True
summary(bm_f_m)
bm_f_m$coefficients['m'] - sum(food_m_ts)
3.565811e+09
sum(food_m_ts)
7.987451e-03
8.941863e-02*100
7.987451e-03*100
# Prediction
pred_bm_f_m<- predict(bm_f_m, newx=c(1:length(food_m_ts)))
pred.inst_bm_f_m<- make.instantaneous(pred_bm_f_m)
# Plot of fitted model
plot(food_m_ts, type= "b",xlab="month", ylab="Monthly sales",  pch=16, lty=3, xaxt="n", cex=0.6)
lines(pred.inst_bm_f_m, lwd=2, col=2)
# check residuals
res_bm_f_m <- food_m_ts - pred.inst_bm_f_m
tsdisplay(res_bm_f_m)
bm_f_w<-BM(food_w_ts,display = T) # show graphical view of results / display = True
summary(bm_f_w)
bm_f_w<-BM(food_w_ts,display = T) # show graphical view of results / display = True
summary(bm_f_w)
bm_f_w$coefficients['m'] - sum(food_w_ts)
# results are similar in terms of m, p and w are in other scale
#because they are in different time stamp
bm_f_m$coefficients['q'] / bm_f_w$coefficients['q'] # they are approx 4 times
bm_f_m$coefficients['p'] / bm_f_w$coefficients['p'] # they are approx 4 times
# Prediction
pred_bm_f_w<- predict(bm_f_w, newx=c(1:length(food_w_ts)))
# Prediction
pred_bm_f_w<- predict(bm_f_w, newx=c(1:length(food_w_ts)))
pred.inst_bm_f_w<- make.instantaneous(pred_bm_f_w)
# Plot of fitted model
plot(food_w_ts, type= "b",xlab="month", ylab="Weekly sales",  pch=16, lty=3, xaxt="n", cex=0.6)
lines(pred.inst_bm_f_w, lwd=2, col=2)
# check residuals
res_bm_f_w <- food_w_ts - pred.inst_bm_f_w
tsdisplay(res_bm_f_w)
bm_f_d<-BM(food_d_ts,display = T) # show graphical view of results / display = True
### Daily--------------
plot(food_d_ts)
food_d_ts
plot(food_d_ts)
# first entries of food are 0 so we drop them and start from 1st december 2021
df_merged_d
head(df_merged_d)
# 6 Non Linear Models----------------
# re-declare time-series beacause we droped some rows:
head(df_merged_d)
# Ensure the 'date' columns are in Date format
df_merged_d$date <- as.Date(df_merged_d$date)
df_merged_w$date <- as.Date(df_merged_w$date)
# Ensure the 'date' columns are in Date format
df_merged_d$date <- as.Date(df_merged_d$date)
df_merged_w$date <- as.Date(df_merged_w$date)
head(df_merged_w)
# Ensure the 'date' columns are in Date format
df_merged_d$date <- as.Date(df_merged_d$date)
df_merged_w$date <- as.Date(df_merged_w$week)
df_merged_m$date <- as.Date(df_merged_m$month)
# Extract the start date and year for each dataframe
start_d <- min(df_merged_d$date)
start_w <- min(df_merged_w$date)
start_m <- min(df_merged_m$date)
# Extract components for daily, weekly, and monthly start times
start_d_year <- as.numeric(format(start_d, "%Y"))
start_d_day <- as.numeric(format(start_d, "%j")) # Day of the year
start_w_year <- as.numeric(format(start_w, "%Y"))
start_w_week <- as.numeric(format(start_w, "%U")) + 1 # Week number, adding 1 since R starts at week 0
start_m_year <- as.numeric(format(start_m, "%Y"))
start_m_month <- as.numeric(format(start_m, "%m"))
# Declare time series with appropriate frequencies
food_d_ts <- ts(df_merged_d$food, start = c(start_d_year, start_d_day), frequency = 365)
food_w_ts <- ts(df_merged_w$food_w, start = c(start_w_year, start_w_week), frequency = 52)
food_m_ts <- ts(df_merged_m$food_m, start = c(start_m_year, start_m_month), frequency = 12)
bar_d_ts <- ts(df_merged_d$bar, start = c(start_d_year, start_d_day), frequency = 365)
bar_w_ts <- ts(df_merged_w$bar_w, start = c(start_w_year, start_w_week), frequency = 52)
bar_m_ts <- ts(df_merged_m$bar_m, start = c(start_m_year, start_m_month), frequency = 12)
# Verify the created time series
print(food_d_ts)
# Verify the created time series
plot(food_d_ts)
# Ensure the 'date' columns are in Date format
df_merged_d$date <- as.Date(df_merged_d$date)
df_merged_w$date <- as.Date(df_merged_w$week)
df_merged_m$date <- as.Date(df_merged_m$month)
# Extract the start date and year for each dataframe
start_d <- min(df_merged_d$date)
start_w <- min(df_merged_w$date)
start_m <- min(df_merged_m$date)
# Extract components for daily, weekly, and monthly start times
start_d_year <- as.numeric(format(start_d, "%Y"))
start_d_day <- as.numeric(format(start_d, "%j")) # Day of the year
start_w_year <- as.numeric(format(start_w, "%Y"))
start_w_week <- as.numeric(format(start_w, "%U")) + 1 # Week number, adding 1 since R starts at week 0
start_m_year <- as.numeric(format(start_m, "%Y"))
start_m_month <- as.numeric(format(start_m, "%m"))
# Declare time series with appropriate frequencies
food_d_ts <- ts(exp(df_merged_d$food), start = c(start_d_year, start_d_day), frequency = 365)
food_w_ts <- ts(exp(df_merged_w$food_w), start = c(start_w_year, start_w_week), frequency = 52)
food_m_ts <- ts(exp(df_merged_m$food_m), start = c(start_m_year, start_m_month), frequency = 12)
bar_d_ts <- ts(exp(df_merged_d$bar), start = c(start_d_year, start_d_day), frequency = 365)
bar_w_ts <- ts(exp(df_merged_w$bar_w), start = c(start_w_year, start_w_week), frequency = 52)
bar_m_ts <- ts(exp(df_merged_m$bar_m), start = c(start_m_year, start_m_month), frequency = 12)
# Verify the created time series
plot(food_d_ts)
plot(food_w_ts)
plot(food_m_ts)
plot(bar_d_ts)
plot(bar_w_ts)
plot(bar_m_ts)
# Verify the created time series
plot(food_d_ts)
plot(food_w_ts)
plot(food_m_ts)
plot(bar_d_ts)
plot(bar_w_ts)
plot(bar_m_ts)
plot(bar_d_ts)
# Function to replace 1s with the mean of previous and next observations
fill_ones <- function(ts_data) {
# Convert time series to numeric vector
ts_vec <- as.numeric(ts_data)
# Loop through and replace 1s
for (i in seq_along(ts_vec)) {
if (ts_vec[i] == 1) {
# Check boundaries to avoid indexing issues
prev_val <- ifelse(i > 1, ts_vec[i - 1], NA)
next_val <- ifelse(i < length(ts_vec), ts_vec[i + 1], NA)
# Replace with mean of previous and next, ignoring NA
ts_vec[i] <- mean(c(prev_val, next_val), na.rm = TRUE)
}
}
# Return as time series with original attributes
ts(ts_vec, start = start(ts_data), frequency = frequency(ts_data))
}
# Apply the function to your time series
food_d_ts <- fill_ones(food_d_ts)
food_w_ts <- fill_ones(food_w_ts)
food_m_ts <- fill_ones(food_m_ts)
bar_d_ts <- fill_ones(bar_d_ts)
bar_w_ts <- fill_ones(bar_w_ts)
bar_m_ts <- fill_ones(bar_m_ts)
# Verify the updated time series
plot(food_d_ts, main = "Food Daily TS (Adjusted)")
plot(food_w_ts, main = "Food Weekly TS (Adjusted)")
plot(food_m_ts, main = "Food Monthly TS (Adjusted)")
plot(bar_d_ts, main = "Bar Daily TS (Adjusted)")
plot(bar_w_ts, main = "Bar Weekly TS (Adjusted)")
plot(bar_m_ts, main = "Bar Monthly TS (Adjusted)")
## 6.1 Difussion Models----------------
## 6.1.1 BASS Model Food--------------
### Monthly---------
# simple Bass model
bm_f_m<-BM(food_m_ts,display = T) # show graphical view of results / display = True
summary(bm_f_m)
bm_f_m$coefficients['m'] - sum(food_m_ts)
# Prediction
pred_bm_f_m<- predict(bm_f_m, newx=c(1:length(food_m_ts)))
pred.inst_bm_f_m<- make.instantaneous(pred_bm_f_m)
# Plot of fitted model
plot(food_m_ts, type= "b",xlab="month", ylab="Monthly sales",  pch=16, lty=3, xaxt="n", cex=0.6)
lines(pred.inst_bm_f_m, lwd=2, col=2)
lines(pred.inst_bm_f_m, lwd=2, col=2)
# Prediction
food_m_ts
# Prediction
plot(food_m_ts)
# Prediction
pred_bm_f_m <- ts(pred_bm_f_m, start = start(food_m_ts), frequency = frequency(food_m_ts))
pred.inst_bm_f_m <- ts(pred.inst_bm_f_m, start = start(food_m_ts), frequency = frequency(food_m_ts))
# Plot of fitted model
plot(food_m_ts, type= "b",xlab="month", ylab="Monthly sales",  pch=16, lty=3, xaxt="n", cex=0.6)
lines(pred.inst_bm_f_m, lwd=2, col=2)
# Prediction
pred_bm_f_m <- ts(pred_bm_f_m, start = start(food_m_ts), frequency = frequency(food_m_ts))
pred.inst_bm_f_m <- ts(pred.inst_bm_f_m, start = start(food_m_ts), frequency = frequency(food_m_ts))
# Plot of fitted model
plot(food_m_ts, type= "b",xlab="month", ylab="Monthly sales",  pch=16, lty=3, xaxt="n", cex=0.6)
plot(food_m_ts)
lines(pred.inst_bm_f_m, lwd=2, col=2)
# Plot of fitted model
plot(food_m_ts, type= "b",xlab="month", ylab="Monthly sales",  pch=16, lty=3, xaxt="n", cex=0.6)
lines(pred.inst_bm_f_m, lwd=2, col=2)
# Plot the original time series
plot(food_m_ts, type = "b", xlab = "Month", ylab = "Monthly Sales",
pch = 16, lty = 3, xaxt = "n", cex = 0.6, col = "blue")
axis(1, at = time(food_m_ts), labels = format(time(food_m_ts), "%Y-%m"))
# Add the predicted values
lines(pred.inst_bm_f_m, lwd = 2, col = "red")
# Add a legend for clarity
legend("topright", legend = c("Actual Sales", "Predicted Sales"), col = c("blue", "red"),
lty = c(3, 1), pch = c(16, NA), lwd = c(1, 2))
plot(food_m_ts, type = "b", xlab = "Month", ylab = "Monthly Sales",
pch = 16, lty = 3, xaxt = "n", cex = 0.6, col = "blue")
axis(1, at = time(food_m_ts), labels = format(time(food_m_ts), "%Y-%m"))
# Plot the original time series
plot(food_m_ts, type = "b", xlab = "Month", ylab = "Monthly Sales",
pch = 16, lty = 3, cex = 0.6, col = "blue", xaxt = "n")
# Create proper x-axis labels using the time of the series
time_index <- as.Date(time(food_m_ts), origin = "1970-01-01")
axis(1, at = time(food_m_ts), labels = format(time_index, "%Y-%m"))
# Add the predicted instantaneous values
lines(pred.inst_bm_f_m, lwd = 2, col = "red")
# Add a legend for clarity
legend("topright", legend = c("Actual Sales", "Predicted Sales"),
col = c("blue", "red"), lty = c(3, 1), pch = c(16, NA), lwd = c(1, 2))
# Add a legend for clarity
legend("bottomright", legend = c("Actual Sales", "Predicted Sales"),
col = c("blue", "red"), lty = c(3, 1), pch = c(16, NA), lwd = c(1, 2))
# Plot the original time series
plot(food_m_ts, type = "b", xlab = "Month", ylab = "Monthly Sales",
pch = 16, lty = 3, cex = 0.6, col = "blue", xaxt = "n")
# Plot the original time series
plot(food_m_ts, type = "b", xlab = "Month", ylab = "Monthly Sales",
pch = 16, lty = 3, cex = 0.6, col = "black", xaxt = "n")
# Create proper x-axis labels using the time of the series
time_index <- as.Date(time(food_m_ts), origin = "1970-01-01")
axis(1, at = time(food_m_ts), labels = format(time_index, "%Y-%m"))
# Add the predicted instantaneous values
lines(pred.inst_bm_f_m, lwd = 2, col = "red")
# Add a legend for clarity
legend("bottomright", legend = c("Actual Sales", "Predicted Sales"),
col = c("black", "red"), lty = c(3, 1), pch = c(16, NA), lwd = c(1, 2))
# check residuals
res_bm_f_m <- food_m_ts - pred.inst_bm_f_m
tsdisplay(res_bm_f_m)
bm_f_w<-BM(food_w_ts,display = T) # show graphical view of results / display = True
summary(bm_f_w)
bm_f_w$coefficients['m'] - sum(food_w_ts)
# results are similar in terms of m, p and w are in other scale
#because they are in different time stamp
bm_f_m$coefficients['q'] / bm_f_w$coefficients['q'] # they are approx 4 times
bm_f_m$coefficients['p'] / bm_f_w$coefficients['p'] # they are approx 4 times
# Prediction
pred_bm_f_w <- ts(pred_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
pred.inst_bm_f_w <- ts(pred.inst_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
# Plot of fitted model
# Plot the original time series
plot(food_w_ts, type = "b", xlab = "Week", ylab = "Weekly Sales",
pch = 16, lty = 3, cex = 0.6, col = "black", xaxt = "n")
# Prediction
pred_bm_f_w <- ts(pred_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
pred.inst_bm_f_w <- ts(pred.inst_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
# Plot the original time series
plot(food_w_ts, type = "b", xlab = "Week", ylab = "Weekly Sales",
pch = 16, lty = 3, cex = 0.6, col = "black", xaxt = "n")
# Generate proper x-axis labels for weekly data
# Start date
start_date <- as.Date(paste(start(food_w_ts)[1], start(food_w_ts)[2] * 7 - 6, sep = "-"), format = "%Y-%j")
# Generate weekly sequence
time_index <- seq(from = start_date, by = "week", length.out = length(food_w_ts))
# Add custom x-axis with formatted dates
axis(1, at = seq_along(food_w_ts), labels = format(time_index, "%Y-%W"))
# Add the predicted instantaneous values
lines(pred.inst_bm_f_w, lwd = 2, col = "red")
# Add a legend for clarity
legend("bottomright", legend = c("Actual Sales", "Predicted Sales"),
col = c("black", "red"), lty = c(3, 1), pch = c(16, NA), lwd = c(1, 2))
# Prediction
pred_bm_f_w <- ts(pred_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
pred.inst_bm_f_w <- ts(pred.inst_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
# Plot of fitted model
# Plot the original time series
plot(food_w_ts, type = "b", xlab = "Week", ylab = "Weekly Sales",
pch = 16, lty = 3, cex = 0.6, col = "black", xaxt = "n")
# Create proper x-axis labels using the time of the series
time_index <- as.Date(time(food_w_ts), origin = "1970-01-01")
axis(1, at = time(food_w_ts), labels = format(time_index, "%Y-%m"))
# Prediction
pred_bm_f_w <- ts(pred_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
pred.inst_bm_f_w <- ts(pred.inst_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
# Plot of fitted model
# Plot the original time series
plot(food_w_ts, type = "b", xlab = "Week", ylab = "Weekly Sales",
pch = 16, lty = 3, cex = 0.6, col = "black", xaxt = "n")
# Create proper x-axis labels using the time of the series
time_index <- as.Date(time(food_m_ts), origin = "1970-01-01")
axis(1, at = time(food_m_ts), labels = format(time_index, "%Y-%m"))
axis(1, at = time(food_w_ts), labels = format(time_index, "%Y-%m"))
# Create proper x-axis labels using the time of the series
time_index <- as.Date(time(food_m_ts), origin = "1970-01-01")
# Create proper x-axis labels using the time of the series
time_index <- as.Date(time(food_w_ts), origin = "1970-01-01")
axis(1, at = time(food_w_ts), labels = format(time_index, "%Y-%m"))
# Plot of fitted model
# Plot the original time series
plot(food_w_ts, type = "b", xlab = "Week", ylab = "Weekly Sales",
pch = 16, lty = 3, cex = 0.6, col = "black", xaxt = "n")
# Create proper x-axis labels using the time of the series
time_index <- as.Date(time(food_w_ts), origin = "1970-01-01")
axis(1, at = time(food_w_ts), labels = format(time_index, "%Y-%m"))
# Prediction
pred_bm_f_w <- ts(pred_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
pred.inst_bm_f_w <- ts(pred.inst_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
# Plot of fitted model
# Plot the original time series
plot(food_w_ts, type = "b", xlab = "Week", ylab = "Weekly Sales",
pch = 16, lty = 3, cex = 0.6, col = "black", xaxt = "n")
# Create proper x-axis labels using the time of the series
time_index <- as.Date(time(food_w_ts), origin = "1970-01-01")
# Prediction
pred_bm_f_w <- ts(pred_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
pred.inst_bm_f_w <- ts(pred.inst_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
# Plot the original time series
plot(food_w_ts, type = "b", xlab = "Week", ylab = "Weekly Sales",
pch = 16, lty = 3, cex = 0.6, col = "black", xaxt = "n")
# Generate proper x-axis labels for weekly data
# Start date
start_date <- as.Date(paste(start(food_w_ts)[1], start(food_w_ts)[2] * 7 - 6, sep = "-"), format = "%Y-%j")
# Generate weekly sequence
time_index <- seq(from = start_date, by = "week", length.out = length(food_w_ts))
# Add custom x-axis with formatted dates
axis(1, at = seq_along(food_w_ts), labels = format(time_index, "%Y-%W"))
# Add the predicted instantaneous values
lines(pred.inst_bm_f_w, lwd = 2, col = "red")
# Add a legend for clarity
legend("bottomright", legend = c("Actual Sales", "Predicted Sales"),
col = c("black", "red"), lty = c(3, 1), pch = c(16, NA), lwd = c(1, 2))
# Start date of the weekly time series
start_date <- as.Date(paste(start(food_w_ts)[1], start(food_w_ts)[2] * 7 - 6, sep = "-"), format = "%Y-%j")
# Generate a sequence of weekly dates
time_index <- seq(from = start_date, by = "week", length.out = length(food_w_ts))
# Plot the original time series
plot(food_w_ts, type = "b", xlab = "Week", ylab = "Weekly Sales",
pch = 16, lty = 3, cex = 0.6, col = "black", xaxt = "n")
# Add proper date labels to the x-axis
axis(1, at = seq_along(food_w_ts), labels = format(time_index, "%Y-%m-%d"), las = 2, cex.axis = 0.7)
# Add the predicted instantaneous values
lines(pred.inst_bm_f_w, lwd = 2, col = "red")
# Add a legend for clarity
legend("bottomright", legend = c("Actual Sales", "Predicted Sales"),
col = c("black", "red"), lty = c(3, 1), pch = c(16, NA), lwd = c(1, 2))
start_date
# Generate a sequence of weekly dates
time_index <- seq(from = start_date, by = "week", length.out = length(food_w_ts))
time_index
# Plot the original time series
plot(food_w_ts, type = "b", xlab = "Week", ylab = "Weekly Sales",
pch = 16, lty = 3, cex = 0.6, col = "black", xaxt = "n")
# Add proper date labels to the x-axis
axis(1, at = seq_along(food_w_ts), labels = format(time_index, "%Y-%m-%d"), las = 2, cex.axis = 0.7)
str(food_w_ts
str(food_w_ts)
str(food_w_ts)
plot(food_w_ts)
# Plot the original time series
plot(food_w_ts, type = "b", xlab = "Week", ylab = "Weekly Sales",
pch = 16, lty = 3, cex = 0.6, col = "black", xaxt = "n")
# Extract the time index and format it as weekly dates
time_index <- as.Date((time(food_w_ts) - 1970) * 365.25, origin = "1970-01-01")
# Add proper date labels to the x-axis
axis(1, at = seq_along(food_w_ts), labels = format(time_index, "%Y-%W"), las = 2, cex.axis = 0.7)
# Extract the time index and format it as weekly dates
time_index <- as.Date((time(food_w_ts) - 1970) * 365.25, origin = "1970-01-01")
# Extract the start date of the time series
start_year <- start(food_w_ts)[1]
start_week <- start(food_w_ts)[2]
# Generate a sequence of weekly dates based on the time series
time_index <- seq(
from = as.Date(paste0(start_year, "-01-01")) + (start_week - 1) * 7,
by = "week",
length.out = length(food_w_ts)
)
# Plot the original time series
plot(food_w_ts, type = "b", xlab = "Week", ylab = "Weekly Sales",
pch = 16, lty = 3, cex = 0.6, col = "black", xaxt = "n")
# Add proper weekly date labels to the x-axis
axis(1, at = seq_along(food_w_ts), labels = format(time_index, "%Y-%W"), las = 2, cex.axis = 0.7)
# Add the predicted instantaneous values
lines(pred.inst_bm_f_w, lwd = 2, col = "red")
# Add a legend for clarity
legend("bottomright", legend = c("Actual Sales", "Predicted Sales"),
col = c("black", "red"), lty = c(3, 1), pch = c(16, NA), lwd = c(1, 2))
# Ensure the predictions are aligned with the time series
pred.inst_bm_f_w <- ts(pred.inst_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
plot(pred.inst_bm_f_w)
# Create the plot
plot(food_w_ts, type = "p", col = "black", pch = 16, cex = 0.7,
xlab = "Week", ylab = "Weekly Sales", main = "Actual vs Fitted Sales")
# Add the fitted values as a line
lines(pred.inst_bm_f_w, col = "red", lwd = 2)
# Add a legend
legend("topleft", legend = c("Actual Values", "Fitted Values"),
col = c("black", "red"), pch = c(16, NA), lty = c(NA, 1), lwd = c(NA, 2))
## 6.1 Difussion Models----------------
## 6.1.1 BASS Model Food--------------
### Monthly---------
# simple Bass model
bm_f_m<-BM(food_m_ts,display = T) # show graphical view of results / display = True
summary(bm_f_m)
bm_f_m$coefficients['m'] - sum(food_m_ts)
# Prediction
pred_bm_f_m <- ts(pred_bm_f_m, start = start(food_m_ts), frequency = frequency(food_m_ts))
pred.inst_bm_f_m <- ts(pred.inst_bm_f_m, start = start(food_m_ts), frequency = frequency(food_m_ts))
# plot
plot(food_m_ts, type = "p", col = "black", pch = 16, cex = 0.7,
xlab = "Month", ylab = "Monthly Sales", main = "Actual vs Fitted Sales")
# Add the fitted values as a line
lines(pred.inst_bm_f_m, col = "red", lwd = 2)
# Add a legend
legend("topleft", legend = c("Actual Values", "Fitted Values"),
col = c("black", "red"), pch = c(16, NA), lty = c(NA, 1), lwd = c(NA, 2))
# check residuals
res_bm_f_m <- food_m_ts - pred.inst_bm_f_m
tsdisplay(res_bm_f_m)
bm_f_w<-BM(food_w_ts,display = T) # show graphical view of results / display = True
summary(bm_f_w)
bm_f_w$coefficients['m'] - sum(food_w_ts)
# results are similar in terms of m, p and w are in other scale
#because they are in different time stamp
bm_f_m$coefficients['q'] / bm_f_w$coefficients['q'] # they are approx 4 times
bm_f_m$coefficients['p'] / bm_f_w$coefficients['p'] # they are approx 4 times
plot(food_w_ts)
# Prediction
pred_bm_f_w <- ts(pred_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
pred.inst_bm_f_w <- ts(pred.inst_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
# Ensure the predictions are aligned with the time series
pred.inst_bm_f_w <- ts(pred.inst_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
# Ensure the predictions are aligned with the time series
pred.inst_bm_f_w <- ts(pred.inst_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
# Create the plot
plot(food_w_ts, type = "p", col = "black", pch = 16, cex = 0.7,
xlab = "Week", ylab = "Weekly Sales", main = "Actual vs Fitted Sales")
# Add the fitted values as a line
lines(pred.inst_bm_f_w, col = "red", lwd = 2)
# check residuals
res_bm_f_w <- food_w_ts - pred.inst_bm_f_w
tsdisplay(res_bm_f_w)
# first entries of food are 0 so we drop them and start from 1st december 2021
df_merged_d
plot(food_d_ts)
# first entries of food are 0 so we drop them and start from 1st december 2021
bm_f_d<-BM(food_d_ts,display = T) # show graphical view of results / display = True
summary(bm_f_d)
summary(bm_f_d)
# first entries of food are 0 so we drop them and start from 1st december 2021
bm_f_d<-BM(food_d_ts,display = T) # show graphical view of results / display = True
summary(bm_f_d)
bm_f_d$coefficients['m'] - sum(food_d_ts)
# results are similar in terms of m, p and w are in other scale
#because they are in different time stamp
bm_f_w$coefficients['q'] / bm_f_d$coefficients['q'] # they are approx 7 times
bm_f_w$coefficients['p'] / bm_f_d$coefficients['p'] # they are approx 7 times
# first entries of food are 0 so we drop them and start from 1st december 2021
bm_f_d<-BM(food_d_ts,display = T) # show graphical view of results / display = True
summary(bm_f_d)
bm_f_d$coefficients['m'] - sum(food_d_ts)
# results are similar in terms of m, p and w are in other scale
#because they are in different time stamp
bm_f_w$coefficients['q'] / bm_f_d$coefficients['q'] # they are approx 7 times
bm_f_w$coefficients['p'] / bm_f_d$coefficients['p'] # they are approx 7 times
# Prediction
pred_bm_f_d <- ts(pred_bm_f_d, start = start(food_d_ts), frequency = frequency(food_d_ts))
pred.inst_bm_f_d <- ts(pred.inst_bm_f_d, start = start(food_d_ts), frequency = frequency(food_d_ts))
# first entries of food are 0 so we drop them and start from 1st december 2021
bm_f_d<-BM(food_d_ts,display = T) # show graphical view of results / display = True
summary(bm_f_d)
bm_f_d$coefficients['m'] - sum(food_d_ts)
# results are similar in terms of m, p and w are in other scale
#because they are in different time stamp
bm_f_w$coefficients['q'] / bm_f_d$coefficients['q'] # they are approx 7 times
bm_f_w$coefficients['p'] / bm_f_d$coefficients['p'] # they are approx 7 times
# Prediction
pred_bm_f_d <- ts(pred_bm_f_d, start = start(food_d_ts), frequency = frequency(food_d_ts))
## 6.1 Difussion Models----------------
## 6.1.1 BASS Model Food--------------
### Monthly---------
# simple Bass model
bm_f_m<-BM(food_m_ts,display = T) # show graphical view of results / display = True
summary(bm_f_m)
bm_f_m$coefficients['m'] - sum(food_m_ts)
# Prediction
pred_bm_f_m<- predict(bm_f_m, newx=c(1:length(food_m_ts)))
pred_bm_f_m <- ts(pred_bm_f_m, start = start(food_m_ts), frequency = frequency(food_m_ts))
pred.inst_bm_f_m <- ts(pred.inst_bm_f_m, start = start(food_m_ts), frequency = frequency(food_m_ts))
# plot
plot(food_m_ts, type = "p", col = "black", pch = 16, cex = 0.7,
xlab = "Month", ylab = "Monthly Sales", main = "Actual vs Fitted Sales")
# Add the fitted values as a line
lines(pred.inst_bm_f_m, col = "red", lwd = 2)
# check residuals
res_bm_f_m <- food_m_ts - pred.inst_bm_f_m
tsdisplay(res_bm_f_m)
bm_f_w<-BM(food_w_ts,display = T) # show graphical view of results / display = True
summary(bm_f_w)
bm_f_w$coefficients['m'] - sum(food_w_ts)
# results are similar in terms of m, p and w are in other scale
#because they are in different time stamp
bm_f_m$coefficients['q'] / bm_f_w$coefficients['q'] # they are approx 4 times
bm_f_m$coefficients['p'] / bm_f_w$coefficients['p'] # they are approx 4 times
plot(food_w_ts)
# Prediction
pred_bm_f_w<- predict(bm_f_w, newx=c(1:length(food_w_ts)))
pred_bm_f_w <- ts(pred_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
pred.inst_bm_f_w <- ts(pred.inst_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
pred.inst_bm_f_w <- ts(pred.inst_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
# Ensure the predictions are aligned with the time series
pred.inst_bm_f_w <- ts(pred.inst_bm_f_w, start = start(food_w_ts), frequency = frequency(food_w_ts))
