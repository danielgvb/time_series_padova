# Fit the SARIMAX model
sarima_d <- auto.arima(
cumulative_sales_d_ts,
xreg = fitted_ggm_cum,
seasonal = TRUE,
stepwise = FALSE,
approximation = FALSE
)
# 4. Extract the fitted (cumulative) values of the SARIMAX
# Fitted cumulative values
fitted_cum_sarima <- fitted(sarima_d)
# Convert cumulative fitted values to instantaneous fitted values
fitted_instant_sarima <- diff(c(0, fitted_cum_sarima))
# Turn it into a time series object
fitted_instant_sarima_ts <- ts(
fitted_instant_sarima,
start = start(sales_d_ts),
frequency = frequency(sales_d_ts)
)
# 5. Plot the actual daily sales and the SARIMAX instantaneous fit
plot(
sales_d_ts,
type = "o",
col  = "black",
lwd  = 2,
main = "Actual Daily Sales vs. SARIMAX Fitted (Instantaneous)",
xlab = "Time (Days)",
ylab = "Daily Sales"
)
lines(
fitted_instant_sarima_ts,
col = "red",
lty = 2,
lwd = 2
)
legend(
"bottomright",
legend = c("Actual Daily Sales", "SARIMAX Fit (Instantaneous)"),
col    = c("black", "red"),
lty    = c(1, 2),
lwd    = c(2, 2)
)
#### Residuals-----------------------
# Extract residuals from the SARIMA model
resid_d <- residuals(sarima_d)
# Visualize residuals
tsdisplay(resid_d, main = "Residual Diagnostics for SARIMA Model")
# Test residuals for stationarity
adf_test <- adf.test(resid_d)
cat("ADF Test p-value:", adf_test$p.value, "\n")
if (adf_test$p.value < 0.05) {
cat("The residuals are stationary.\n")
} else {
cat("The residuals are not stationary.\n")
}
# Test residuals for white noise (no autocorrelation)
ljung_box_test <- Box.test(resid_d, lag = 20, type = "Ljung-Box")
cat("Ljung-Box Test p-value:", ljung_box_test$p.value, "\n")
if (ljung_box_test$p.value > 0.05) {
cat("The residuals resemble white noise (uncorrelated).\n")
} else {
cat("The residuals show significant autocorrelation.\n")
}
#### RMSE for SARIMAX Predictions ####
rmse_mixture_d <- calculate_rmse(observed = sales_d_ts, predicted = fitted_instant_sarima_ts)
# Print RMSE for SARIMAX
cat("RMSE for SARIMAX Predictions:", rmse_mixture_d, "\n")
library(prophet)
# sales montly
ggplot(df_merged_m, aes(x=month, y=sales_m)) +
geom_line() + ggtitle("Monthly Sales of Restaurant")
head(df_merged_m)
#Prophet model
# model with no seasonality
df_prophet_m <- df_merged_m[1:2]
head(df_prophet_m)
colnames(df_prophet_m) = c("ds", "y")
df_prophet_m$y <- exp(df_prophet_m$y)
prophet_sales_m <- prophet(df_prophet_m)
head(df_prophet_m)
# Step 2: Create a future dataframe for the next 14 months
future_sales_m <- make_future_dataframe(
prophet_sales_m,
periods = 14,           # Forecast for 14 months
freq = 'month',         # Monthly frequency
include_history = TRUE  # Include historical data in the future dataframe
)
tail(future_sales_m)
forecast_sales_m <- predict(prophet_sales_m, future_sales_m)
tail(forecast_sales_m[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(prophet_sales_m, forecast_sales_m)
prophet_plot_components(prophet_sales_m, forecast_sales_m)
dyplot.prophet(prophet_sales_m, forecast_sales_m)
#Use the original dataframe to get the fitted values
fitted_values <- predict(prophet_sales_m, df_prophet_m)
# Extract the fitted values (column 'yhat' contains the fitted values)
fitted_y <- fitted_values$yhat
# Calculate RMSE
actual_y <- df_prophet_m$y  # Actual sales values
rmse_prophet_m <- calculate_rmse(observed = actual_y, predicted = fitted_y)
# Print RMSE
cat("RMSE for Prophet Fitted Values:", rmse_prophet_m, "\n")
# Calculate Residuals
residuals_prophet <- actual_y - fitted_y  # Residuals = Actual - Fitted
#  Visualize Residuals using tsdisplay
tsdisplay(residuals_prophet, main = "Residual Diagnostics for Prophet Model")
#  Perform ADF Test for Stationarity
adf_test <- adf.test(residuals_prophet)
cat("ADF Test p-value:", adf_test$p.value, "\n")
if (adf_test$p.value < 0.05) {
cat("Residuals are stationary (reject H0).\n")
} else {
cat("Residuals are not stationary (fail to reject H0).\n")
}
#  Perform Serial Correlation Test
ljung_box_test <- Box.test(residuals_prophet, lag = 10, type = "Ljung-Box")
cat("Ljung-Box Test p-value:", ljung_box_test$p.value, "\n")
if (ljung_box_test$p.value > 0.05) {
cat("Residuals resemble white noise (no significant autocorrelation).\n")
} else {
cat("Residuals show significant autocorrelation.\n")
}
ggplot(df_merged_w, aes(x=week, y=sales_w)) +
geom_line() + ggtitle("Weekly Sales of Restaurant")
head(df_merged_w)
#Prophet model
# model with no seasonality
df_prophet_w <- df_merged_w[1:2]
colnames(df_prophet_w) = c("ds", "y")
df_prophet_w$y <- exp(df_prophet_w$y)
df_prophet_w
prophet_sales_w <- prophet(df_prophet_w)
future_sales_w <- make_future_dataframe(prophet_sales_w,
periods = 52,
freq = 'week',
include_history = T)
tail(future_sales_w)
# R
forecast_sales_w <- predict(prophet_sales_w, future_sales_w)
tail(forecast_sales_w[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(prophet_sales_w, forecast_sales_w)
prophet_plot_components(prophet_sales_w, forecast_sales_w)
dyplot.prophet(prophet_sales_w, forecast_sales_w)
# Use the original dataset to get fitted values
fitted_values_w <- predict(prophet_sales_w, df_prophet_w)
# Extract the fitted values (column 'yhat' contains the fitted values)
fitted_y_w <- fitted_values_w$yhat
# Ensure alignment between actual values (y) and fitted values (yhat)
actual_y_w <- df_prophet_w$y  # Actual weekly sales values
# Calculate RMSE for weekly data
rmse_prophet_w <- calculate_rmse(observed = actual_y_w, predicted = fitted_y_w)
# Print RMSE
cat("RMSE for Prophet Fitted Values (Weekly):", rmse_prophet_w, "\n")
# Calculate Residuals
residuals_prophet_w <- actual_y_w - fitted_y_w  # Residuals = Actual - Fitted
# Visualize Residuals using tsdisplay
tsdisplay(residuals_prophet_w, main = "Residual Diagnostics for Weekly Prophet Model")
# Perform ADF Test for Stationarity
adf_test_w <- adf.test(residuals_prophet_w)
cat("ADF Test p-value:", adf_test_w$p.value, "\n")
if (adf_test_w$p.value < 0.05) {
cat("Residuals are stationary (reject H0).\n")
} else {
cat("Residuals are not stationary (fail to reject H0).\n")
}
# Perform Serial Correlation Test
ljung_box_test_w <- Box.test(residuals_prophet_w, lag = 10, type = "Ljung-Box")
cat("Ljung-Box Test p-value:", ljung_box_test_w$p.value, "\n")
if (ljung_box_test_w$p.value > 0.05) {
cat("Residuals resemble white noise (no significant autocorrelation).\n")
} else {
cat("Residuals show significant autocorrelation.\n")
}
head(sales_d_ts)
plot(sales_d_ts)
sales_d_values <- as.numeric(sales_d_ts)   # Extract numeric values
df_prophet_d <- data.frame(
ds = df_merged_d$date,  # Dates
y = sales_d_values   # Sales values
)
#Prophet model
#prophet_sales_d <- prophet(df_prophet, weekly.seasonality = TRUE)
prophet_sales_d <- prophet(df_prophet_d)
future_sales_d <- make_future_dataframe(prophet_sales_d,
periods = 120,
freq = 'day',
include_history = T)
tail(future_sales_d)
forecast_sales_d <- predict(prophet_sales_d, future_sales_d)
tail(forecast_sales_d[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(prophet_sales_d, forecast_sales_d)
prophet_plot_components(prophet_sales_d, forecast_sales_d)
dyplot.prophet(prophet_sales_d, forecast_sales_d)
# Extract fitted values for RMSE calculation
fitted_values_d <- predict(prophet_sales_d, df_prophet_d)
# Extract fitted values (column 'yhat')
fitted_y_d <- fitted_values_d$yhat
actual_y_d <- df_prophet_d$y  # Actual sales values
# Step 8: Calculate RMSE
rmse_prophet_d <- calculate_rmse(observed = actual_y_d, predicted = fitted_y_d)
# Print RMSE
cat("RMSE for Prophet Fitted Values (Daily):", rmse_prophet_d, "\n")
# Calculate Residuals
residuals_prophet_d <- actual_y_d - fitted_y_d  # Residuals = Actual - Fitted
# Visualize Residuals using tsdisplay
tsdisplay(residuals_prophet_d, main = "Residual Diagnostics for Daily Prophet Model")
# Perform ADF Test for Stationarity
adf_test_d <- adf.test(residuals_prophet_d)
cat("ADF Test p-value:", adf_test_d$p.value, "\n")
if (adf_test_d$p.value < 0.05) {
cat("Residuals are stationary (reject H0).\n")
} else {
cat("Residuals are not stationary (fail to reject H0).\n")
}
# Perform Serial Correlation Test
ljung_box_test_d <- Box.test(residuals_prophet_d, lag = 20, type = "Ljung-Box")
cat("Ljung-Box Test p-value:", ljung_box_test_d$p.value, "\n")
if (ljung_box_test_d$p.value > 0.05) {
cat("Residuals resemble white noise (no significant autocorrelation).\n")
} else {
cat("Residuals show significant autocorrelation.\n")
}
rmse_list <- c(rmse_ols_m, rmse_ols_w, rmse_ols_d,
rmse_bm_m, rmse_bm_w, rmse_bm_d,
rmse_ggm1, rmse_ggm_w, rmse_ggm_d,
rmse_hw2,
rmse_auto_arima, rmse_auto_arima_w, rmse_auto_arima_d,
rmse_sarima_d,
rmse_sarimax_d,
rmse_exp_sm_m, rmse_exp_sm_w, rmse_exp_sm_m,
rmse_mixture_m, rmse_mixture_w, rmse_mixture_d,
rmse_prophet_m, rmse_prophet_w, rmse_prophet_d
)
rmse_list
# Initialize an empty data frame for RMSE values
rmse_table <- data.frame(
Model = character(),
Monthly = numeric(),
Weekly = numeric(),
Daily = numeric(),
stringsAsFactors = FALSE
)
# Monthly RMSE values
rmse_monthly <- c(
"OLS" = rmse_ols_m,
"Bass_Model" = rmse_bm_m,
"GGM" = rmse_ggm1,
"Holt_Winters" = rmse_hw2,
"Arima" = rmse_auto_arima,
"Exp_Smooth" = rmse_exp_sm_m,
"GGM+SARIMA" = rmse_mixture_m,
"Prophet" = rmse_prophet_m
)
# Weekly RMSE values
rmse_weekly <- c(
"OLS" = rmse_ols_w,
"Bass_Model" = rmse_bm_w,
"GGM" = rmse_ggm_w,
"Holt_Winters" = NaN,
"Arima" = rmse_auto_arima_w,
"Exp_Smooth" = rmse_exp_sm_w,
"GGM+SARIMA" = rmse_mixture_w,
"Prophet" = rmse_prophet_w
)
# Daily RMSE values
rmse_daily <- c(
"OLS" = rmse_ols_d,
"Bass_Model" = rmse_bm_d,
"GGM" = rmse_ggm_d,
"Holt_Winters" = NaN,
"Arima" = rmse_auto_arima_d,
"Exp_Smooth" = rmse_exp_sm_d,
"GGM+SARIMA" = rmse_mixture_d,
"Prophet" = rmse_prophet_d
)
# Combine RMSE values into a table
for (model_name in names(rmse_monthly)) {
rmse_table <- rbind(rmse_table, data.frame(
Model = model_name,
Monthly = rmse_monthly[model_name],
Weekly = rmse_weekly[model_name],
Daily = rmse_daily[model_name]
))
}
# View the RMSE table
print(rmse_table)
# PLot RMSE
# Transform the data to long format
rmse_long <- rmse_table %>%
pivot_longer(cols = Monthly:Daily, names_to = "Time_Resolution", values_to = "RMSE") %>%
drop_na() # Remove rows with NA values
# Define base colors for each Time_Resolution
base_colors <- c("Monthly" = "black", "Weekly" = "blue", "Daily" = "red")
# Assign dynamic shades for each Time_Resolution and bold the lowest RMSE model
rmse_long <- rmse_long %>%
group_by(Time_Resolution) %>%
mutate(
Fill_Color = scales::alpha(
base_colors[Time_Resolution],
seq(0.3, 1, length.out = n())
),
Label = ifelse(RMSE == min(RMSE, na.rm = TRUE),
paste0("**", Model, "**"),  # Bold the model with lowest RMSE
Model)
) %>%
ungroup()
# Create the bar plot
ggplot(rmse_long, aes(x = Time_Resolution, y = RMSE, fill = Fill_Color)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_text(aes(label = Label),
position = position_dodge(width = 0.8),
vjust = -0.5,
size = 3,
angle = 45,  # Tilt the model names
hjust = 1) +  # Adjust alignment for tilted text
scale_fill_identity() +
labs(
title = "Comparison of RMSE Across Models",
x = "Time Resolution",
y = "RMSE"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
# target variable
test_sales_df <- read_excel("data/sales/test_data.xlsx")
head(test_sales_df)
df_sales_m_test <- test_sales_df %>%
mutate(month = floor_date(date, "month")) %>% # Extract month
group_by(month) %>%
summarise(sales_m = sum(sales_cop), bar_m = sum(bar), food_m = sum(food)
)     # Summing values
head(df_sales_m_test)
## sales weekly
df_sales_w_test <- test_sales_df %>%
mutate(week = floor_date(date, "week")) %>% # Extract month
group_by(week) %>%
summarise(sales_w = sum(sales_cop), bar_w = sum(bar), food_w = sum(food))     # Summing values
head(df_sales_w_test)
# Length of historical data
N <- length(sales_m_ts)
# Time index for the next 38 periods
future_times <- matrix((N + 1):(N + 38), ncol = 1)
# Predict cumulative sales for the next 38 periods
ggm_future_cum <- predict(ggm1, newx = future_times)
# Convert cumulative sales forecast to instantaneous sales
ggm_future_inst <- make.instantaneous(ggm_future_cum)[-1]
# Get the end time of sales_m_ts
end_time <- tsp(sales_m_ts)[2]  # End time of original series
# Start the forecast at the next period
forecast_start <- end_time + 1 / frequency(sales_m_ts)
# Create a time series object for the forecast
ggm_future_inst_ts <- ts(
ggm_future_inst,
start = forecast_start,
frequency = frequency(sales_m_ts)
)
# Step 5: Plot the forecast with aligned index
plot(
sales_m_ts,
type = "o",
col = "black",
lwd = 2,
main = "Original, Fitted, and Forecasted Instantaneous Sales",
xlab = "Time",
ylab = "Monthly Sales",
xlim = c(start(sales_m_ts)[1], forecast_start + 38 / frequency(sales_m_ts))
)
lines(
pred.inst_ggm_m,
col = "red",
lty = 2,
lwd = 2
)
lines(
ggm_future_inst_ts,
col = "blue",
lty = 2,
lwd = 2
)
legend(
"bottomright",
legend = c("Original Sales", "Fitted Values", "Forecast"),
col = c("black", "red", "blue"),
lty = c(1, 2, 2),
lwd = c(2, 2, 2)
)
# Step 1: Re-Fit the Holt-Winters model
hw2_m <- hw(sales_m_ts, seasonal = "multiplicative")
# Step 2: Generate the forecast for the next 24 months
forecast_hw <- forecast(hw2_m, h = 24)
# Step 3: Use autoplot to plot the original values and the forecast
autoplot(forecast_hw) +
ggtitle("Holt-Winters Forecast and Original Sales") +
xlab("Time") +
ylab("Monthly Sales") +
theme_minimal()
# Compare actual vs forecasted
actual_sales_m <- df_sales_m_test$sales_m
forecasted_hw <- forecast_hw$mean[1:2]
forecasted_ggm <- ggm_future_inst_ts[1:2]
rmse_test_hw <-calculate_rmse(actual_sales_m, forecasted_hw)
rmse_test_ggm <- calculate_rmse(actual_sales_m, forecasted_ggm)
cat("Error Holt-Winters:", rmse_test_hw, "\n")
cat("Error GGM:", rmse_test_ggm, "\n")
# Combine the actual and forecasted data into a data frame
plot_data <- data.frame(
Period = c("Last Period 1", "Last Period 2"),
Actual = actual_sales_m,
HoltWinters = forecasted_hw,
GGM = forecasted_ggm
)
plot_data_melt <- melt(plot_data, id.vars = "Period", variable.name = "Type", value.name = "Sales")
# Plot the historical sales data for 2024
plot(
window(sales_m_ts, start = c(2024, 1), end = c(2024, 12)),
type = "o",
col = "black",
lwd = 2,
main = "Sales Forecasts for Nov - Dec 2024",
xlab = "Time (Months)",
ylab = "Monthly Sales",
xlim = c(2024, 2024 + 11 / 12)  # Restrict to 2024
)
# Add the GGM forecast for November and December 2024 (Red dashed line)
lines(
window(ggm_future_inst_ts, start = c(2024, 11), end = c(2024, 12)),
col = "red",
lty = 2,  # Dashed line
lwd = 2
)
# Add the Holt-Winters forecast for November and December 2024 (Blue dotted line)
lines(
window(forecast_hw$mean, start = c(2024, 11), end = c(2024, 12)),
col = "blue",
lty = 3,  # Dotted line
lwd = 2
)
# Add a legend
legend(
"topleft",
legend = c("Original Sales", "GGM Forecast", "Holt-Winters Forecast"),
col = c("black", "red", "blue"),
lty = c(1, 2, 3),  # Line styles match plot
lwd = c(2, 2, 2)
)
# Filter forecast for November and December 2024
forecast_nov_dec_w <- forecast_sales_w %>%
filter(ds >= as.Date("2024-11-01") & ds <= as.Date("2025-01-05"))
# Plot the actual sales with black dots
plot(as.Date(df_sales_w_test$week), df_sales_w_test$sales_w,
type = "p",                             # Points for actual sales
pch = 16,                               # Solid circles
col = "black",                          # Black color for points
xlab = "Date",                          # X-axis label
ylab = "Sales",                         # Y-axis label
main = "Actual Sales vs Forecasted Sales (Nov-Dec 2024)")  # Title
# Add the forecast line in red
lines(as.Date(forecast_nov_dec_w$ds), forecast_nov_dec_w$yhat,
col = "red",                          # Red color for the line
lwd = 2)                              # Wider line
# Add a legend in the top right
legend("topright",
legend = c("Actual Sales", "Forecasted Sales"),
col = c("black", "red"),             # Colors matching the plot
pch = c(16, NA),                     # Solid dot for actual sales, none for line
lty = c(NA, 1),                      # Line for forecasted sales, none for dot
lwd = c(NA, 2))                      # Line width for the forecast
# Filter forecast for November and December 2024
forecast_nov_dec_d <- forecast_sales_d %>%
filter(ds >= as.Date("2024-11-01") & ds <= as.Date("2025-01-05"))
# Plot the actual sales with black dots
plot(as.Date(test_sales_df$date), test_sales_df$sales_cop,
type = "p",                             # Points for actual sales
pch = 16,                               # Solid circles
col = "black",                          # Black color for points
xlab = "Date",                          # X-axis label
ylab = "Sales",                         # Y-axis label
main = "Actual Sales vs Forecasted Sales (Nov-Dec 2024)")  # Title
# Add the forecast line in red
lines(as.Date(forecast_nov_dec_d$ds), forecast_nov_dec_d$yhat,
col = "red",                          # Red color for the line
lwd = 2)                              # Wider line
# Add a legend in the top right
legend("topright",
legend = c("Actual Sales", "Forecasted Sales"),
col = c("black", "red"),             # Colors matching the plot
pch = c(16, NA),                     # Solid dot for actual sales, none for line
lty = c(NA, 1),                      # Line for forecasted sales, none for dot
lwd = c(NA, 2))                      # Line width for the forecast
long_term_forecasted_hw <- forecast_hw$mean
long_term_forecasted_ggm <- ggm_future_inst_ts
# Define the date ranges for both series
dates_hw <- seq(as.Date("2024-11-01"), as.Date("2026-10-01"), by = "month")
dates_ggm <- seq(as.Date("2024-11-01"), as.Date("2027-11-01"), by = "month")
# Create data frames for the two series
df_hw <- data.frame(Date = dates_hw, Value = long_term_forecasted_hw)
df_ggm <- data.frame(Date = dates_ggm, Value = long_term_forecasted_ggm)
# Merge the two series on the common dates
df_merged <- merge(df_hw, df_ggm, by = "Date", suffixes = c("_hw", "_ggm"))
# Calculate the mean of both series where data is available
df_merged$Mean <- rowMeans(df_merged[, c("Value_hw", "Value_ggm")], na.rm = TRUE)
# Create the new time series
long_term_forecast <- data.frame(Date = df_merged$Date, Mean = df_merged$Mean)
# Plot the actual sales with black dots
plot(as.Date(long_term_forecast$Date), long_term_forecast$Mean,
type = "l",                             # Points for actual sales
lwd = 2,
pch = 16,                               # Solid circles
col = "blue",                          # Black color for points
xlab = "Date",                          # X-axis label
ylab = "Sales",                         # Y-axis label
main = " Forecasted Sales (Oct 2024 -Oct 2026)")  # Title
