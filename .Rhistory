# Compare actual vs forecasted
actual_sales_m <- df_sales_m_test$sales_m
forecasted_hw <- forecast_hw$mean[1:2]
rmse_test_hw <-calculate_rmse(actual_sales_m, forecasted_hw)
rmse_test_hw
# Compare actual vs forecasted
actual_sales_m <- df_sales_m_test$sales_m
forecasted_hw <- forecast_hw$mean[1:2]
forecasted_ggm <- ggm_future_inst_ts[1:2]
rmse_test_hw <-calculate_rmse(actual_sales_m, forecasted_hw)
rmse_test_ggm <- calculate_rmse(actual_sales_m, forecasted_ggm)
print("Error Holt-Winters",rmse_test_hw)
# Compare actual vs forecasted
actual_sales_m <- df_sales_m_test$sales_m
forecasted_hw <- forecast_hw$mean[1:2]
forecasted_ggm <- ggm_future_inst_ts[1:2]
rmse_test_hw <-calculate_rmse(actual_sales_m, forecasted_hw)
rmse_test_ggm <- calculate_rmse(actual_sales_m, forecasted_ggm)
cat("Error Holt-Winters:", rmse_test_hw, "\n")
cat("Error GGM:", rmse_test_ggm, "\n")
17357973 < 33822273
forecast_sales_w
tail(forecast_sales_w)
tail(forecast_sales_w$yhat)
forecast_sales_w$yhat
forecast_sales_w
forecast_sales_w
forecast_sales_w$ds
# Combine the actual and forecasted data into a data frame
plot_data <- data.frame(
Period = c("Last Period 1", "Last Period 2"),
Actual = actual_sales_m,
HoltWinters = forecasted_hw,
GGM = forecasted_ggm
)
plot_data_melt <- melt(plot_data, id.vars = "Period", variable.name = "Type", value.name = "Sales")
# Create a plot
ggplot(plot_data_melt, aes(x = Period, y = Sales, fill = Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Actual vs Forecasted Sales",
x = "Period",
y = "Sales",
fill = "Type") +
theme_minimal()
# Filter forecast to match the actual sales dates
forecast_sales_w_filtered <- forecast_sales_w[1:length(df_sales_w_test$sales_w), ]
# Combine actual and forecasted sales into a dataframe for plotting
plot_data <- data.frame(
ds = as.Date(df_sales_w_test$ds),                  # Actual sales dates
Actual = df_sales_w_test$sales_w,                 # Actual sales
Forecast = forecast_sales_w_filtered$yhat         # Forecasted sales
)
# Fit the Prophet model
df_prophet_w <- df_merged_w[1:2]
colnames(df_prophet_w) <- c("ds", "y")
df_prophet_w$y <- exp(df_prophet_w$y)  # Transform the data if required
prophet_sales_w <- prophet(df_prophet_w)
# Create future dataframe
future_sales_w <- make_future_dataframe(
prophet_sales_w,
periods = length(df_sales_w_test$sales_w), # Match the length of actual sales
freq = 'week',                            # Weekly frequency
include_history = TRUE                    # Include historical data
)
# Generate forecast
forecast_sales_w <- predict(prophet_sales_w, future_sales_w)
# Filter forecast to match the actual sales dates
forecast_sales_w_filtered <- forecast_sales_w[1:length(df_sales_w_test$sales_w), ]
# Combine actual and forecasted sales into a dataframe for plotting
plot_data <- data.frame(
ds = as.Date(df_sales_w_test$ds),                  # Actual sales dates
Actual = df_sales_w_test$sales_w,                 # Actual sales
Forecast = forecast_sales_w_filtered$yhat         # Forecasted sales
)
# Fit the Prophet model
df_prophet_w <- df_merged_w[1:2]
colnames(df_prophet_w) <- c("ds", "y")
df_prophet_w$y <- exp(df_prophet_w$y)  # Transform the data if required
prophet_sales_w <- prophet(df_prophet_w)
# Create future dataframe
future_sales_w <- make_future_dataframe(
prophet_sales_w,
periods = length(df_sales_w_test$sales_w), # Match the length of actual sales
freq = 'week',                            # Weekly frequency
include_history = TRUE                    # Include historical data
)
# Generate forecast
forecast_sales_w <- predict(prophet_sales_w, future_sales_w)
# Filter forecast to match the actual sales dates
forecast_sales_w_filtered <- forecast_sales_w[1:length(df_sales_w_test$sales_w), ]
# Combine actual and forecasted sales into a dataframe for plotting
plot_data <- data.frame(
ds = as.Date(df_sales_w_test$date),                  # Actual sales dates
Actual = df_sales_w_test$sales_w,                 # Actual sales
Forecast = forecast_sales_w_filtered$yhat         # Forecasted sales
)
# Filter forecast to match the actual sales dates
forecast_sales_w_filtered <- forecast_sales_w[1:length(df_sales_w_test$sales_w), ]
# Combine actual and forecasted sales into a dataframe for plotting
plot_data <- data.frame(
ds = as.Date(df_sales_w_test$week),                  # Actual sales dates
Actual = df_sales_w_test$sales_w,                 # Actual sales
Forecast = forecast_sales_w_filtered$yhat         # Forecasted sales
)
# Plot using ggplot2
ggplot(plot_data, aes(x = ds)) +
geom_line(aes(y = Actual, color = "Actual Sales"), size = 1) +
geom_line(aes(y = Forecast, color = "Forecasted Sales"), size = 1, linetype = "dashed") +
labs(title = "Actual Sales vs Prophet Forecast",
x = "Date",
y = "Sales",
color = "Legend") +
theme_minimal()
forecast_sales_w_filtered
# Filter forecast to match the actual sales dates
forecast_sales_d_filtered <- forecast_sales_d[1:length(df_sales_d_test$sales_d), ]
# Filter forecast to match the actual sales dates
forecast_sales_d_filtered <- forecast_sales_d[1:length(df_sales_test$sales_cop), ]
# Filter forecast to match the actual sales dates
forecast_sales_d_filtered <- forecast_sales_d[1:length(test_sales_df$sales_cop), ]
# Combine actual and forecasted sales into a dataframe for plotting
plot_data_daily <- data.frame(
ds = as.Date(test_sales_df$date),               # Actual sales dates (daily granularity)
Actual = df_sales_d_test$sales_d,               # Actual sales
Forecast = forecast_sales_d_filtered$yhat       # Forecasted sales
)
# Filter forecast to match the actual sales dates
forecast_sales_d_filtered <- forecast_sales_d[1:length(test_sales_df$sales_cop), ]
# Combine actual and forecasted sales into a dataframe for plotting
plot_data_daily <- data.frame(
ds = as.Date(test_sales_df$date),               # Actual sales dates (daily granularity)
Actual = test_sales_df$sales_d,               # Actual sales
Forecast = forecast_sales_d_filtered$yhat       # Forecasted sales
)
test_sales_df
length(forecast_sales_d_filtered)
forecast_sales_d
#Prophet model
#prophet_sales_d <- prophet(df_prophet, weekly.seasonality = TRUE)
prophet_sales_d <- prophet(df_prophet_d)
future_sales_d <- make_future_dataframe(prophet_sales_d,
periods = 120,
freq = 'day',
include_history = T)
tail(future_sales_d)
forecast_sales_d <- predict(prophet_sales_d, future_sales_d)
tail(forecast_sales_d[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(prophet_sales_d, forecast_sales_d)
prophet_plot_components(prophet_sales_d, forecast_sales_d)
dyplot.prophet(prophet_sales_d, forecast_sales_d)
# Extract fitted values for RMSE calculation
fitted_values_d <- predict(prophet_sales_d, df_prophet_d)
# Extract fitted values (column 'yhat')
fitted_y_d <- fitted_values_d$yhat
actual_y_d <- df_prophet_d$y  # Actual sales values
# Step 8: Calculate RMSE
rmse_prophet_d <- calculate_rmse(observed = actual_y_d, predicted = fitted_y_d)
# Print RMSE
cat("RMSE for Prophet Fitted Values (Daily):", rmse_prophet_d, "\n")
# Calculate Residuals
residuals_prophet_d <- actual_y_d - fitted_y_d  # Residuals = Actual - Fitted
# Visualize Residuals using tsdisplay
tsdisplay(residuals_prophet_d, main = "Residual Diagnostics for Daily Prophet Model")
# Perform ADF Test for Stationarity
adf_test_d <- adf.test(residuals_prophet_d)
cat("ADF Test p-value:", adf_test_d$p.value, "\n")
if (adf_test_d$p.value < 0.05) {
cat("Residuals are stationary (reject H0).\n")
} else {
cat("Residuals are not stationary (fail to reject H0).\n")
}
# Perform Serial Correlation Test
ljung_box_test_d <- Box.test(residuals_prophet_d, lag = 20, type = "Ljung-Box")
cat("Ljung-Box Test p-value:", ljung_box_test_d$p.value, "\n")
if (ljung_box_test_d$p.value > 0.05) {
cat("Residuals resemble white noise (no significant autocorrelation).\n")
} else {
cat("Residuals show significant autocorrelation.\n")
}
rmse_list <- c(rmse_ols_m, rmse_ols_w, rmse_ols_d,
rmse_bm_m, rmse_bm_w, rmse_bm_d,
rmse_ggm1, rmse_ggm_w, rmse_ggm_d,
rmse_hw2,
rmse_auto_arima, rmse_auto_arima_w, rmse_auto_arima_d,
rmse_sarima_d,
rmse_sarimax_d,
rmse_exp_sm_m, rmse_exp_sm_w, rmse_exp_sm_m,
rmse_mixture_m, rmse_mixture_w, rmse_mixture_d,
rmse_prophet_m, rmse_prophet_w, rmse_prophet_d
)
rmse_list
# Initialize an empty data frame for RMSE values
rmse_table <- data.frame(
Model = character(),
Monthly = numeric(),
Weekly = numeric(),
Daily = numeric(),
stringsAsFactors = FALSE
)
# Monthly RMSE values
rmse_monthly <- c(
"OLS" = rmse_ols_m,
"Bass_Model" = rmse_bm_m,
"GGM" = rmse_ggm1,
"Holt_Winters" = rmse_hw2,
"Arima" = rmse_auto_arima,
"Exp_Smooth" = rmse_exp_sm_m,
"GGM+SARIMA" = rmse_mixture_m,
"Prophet" = rmse_prophet_m
)
# Weekly RMSE values
rmse_weekly <- c(
"OLS" = rmse_ols_w,
"Bass_Model" = rmse_bm_w,
"GGM" = rmse_ggm_w,
"Holt_Winters" = NaN,
"Arima" = rmse_auto_arima_w,
"Exp_Smooth" = rmse_exp_sm_w,
"GGM+SARIMA" = rmse_mixture_w,
"Prophet" = rmse_prophet_w
)
# Daily RMSE values
rmse_daily <- c(
"OLS" = rmse_ols_d,
"Bass_Model" = rmse_bm_d,
"GGM" = rmse_ggm_d,
"Holt_Winters" = NaN,
"Arima" = rmse_auto_arima_d,
"Exp_Smooth" = rmse_exp_sm_d,
"GGM+SARIMA" = rmse_mixture_d,
"Prophet" = rmse_prophet_d
)
# Combine RMSE values into a table
for (model_name in names(rmse_monthly)) {
rmse_table <- rbind(rmse_table, data.frame(
Model = model_name,
Monthly = rmse_monthly[model_name],
Weekly = rmse_weekly[model_name],
Daily = rmse_daily[model_name]
))
}
# View the RMSE table
print(rmse_table)
# target variable
test_sales_df <- read_excel("data/sales/test_data.xlsx")
head(test_sales_df)
df_sales_m_test <- test_sales_df %>%
mutate(month = floor_date(date, "month")) %>% # Extract month
group_by(month) %>%
summarise(sales_m = sum(sales_cop), bar_m = sum(bar), food_m = sum(food)
)     # Summing values
head(df_sales_m_test)
## sales weekly
df_sales_w_test <- test_sales_df %>%
mutate(week = floor_date(date, "week")) %>% # Extract month
group_by(week) %>%
summarise(sales_w = sum(sales_cop), bar_w = sum(bar), food_w = sum(food))     # Summing values
head(df_sales_w_test)
# Length of historical data
N <- length(sales_m_ts)
# Time index for the next 38 periods
future_times <- matrix((N + 1):(N + 38), ncol = 1)
# Predict cumulative sales for the next 38 periods
ggm_future_cum <- predict(ggm1, newx = future_times)
# Convert cumulative sales forecast to instantaneous sales
ggm_future_inst <- make.instantaneous(ggm_future_cum)[-1]
# Get the end time of sales_m_ts
end_time <- tsp(sales_m_ts)[2]  # End time of original series
# Start the forecast at the next period
forecast_start <- end_time + 1 / frequency(sales_m_ts)
# Create a time series object for the forecast
ggm_future_inst_ts <- ts(
ggm_future_inst,
start = forecast_start,
frequency = frequency(sales_m_ts)
)
# Step 5: Plot the forecast with aligned index
plot(
sales_m_ts,
type = "o",
col = "black",
lwd = 2,
main = "Original, Fitted, and Forecasted Instantaneous Sales",
xlab = "Time",
ylab = "Monthly Sales",
xlim = c(start(sales_m_ts)[1], forecast_start + 38 / frequency(sales_m_ts))
)
lines(
pred.inst_ggm_m,
col = "red",
lty = 2,
lwd = 2
)
lines(
ggm_future_inst_ts,
col = "blue",
lty = 2,
lwd = 2
)
legend(
"bottomright",
legend = c("Original Sales", "Fitted Values", "Forecast"),
col = c("black", "red", "blue"),
lty = c(1, 2, 2),
lwd = c(2, 2, 2)
)
# Step 1: Re-Fit the Holt-Winters model
hw2_m <- hw(sales_m_ts, seasonal = "multiplicative")
# Step 2: Generate the forecast for the next 24 months
forecast_hw <- forecast(hw2_m, h = 24)
# Step 3: Use autoplot to plot the original values and the forecast
autoplot(forecast_hw) +
ggtitle("Holt-Winters Forecast and Original Sales") +
xlab("Time") +
ylab("Monthly Sales") +
theme_minimal()
# Compare actual vs forecasted
actual_sales_m <- df_sales_m_test$sales_m
forecasted_hw <- forecast_hw$mean[1:2]
forecasted_ggm <- ggm_future_inst_ts[1:2]
rmse_test_hw <-calculate_rmse(actual_sales_m, forecasted_hw)
rmse_test_ggm <- calculate_rmse(actual_sales_m, forecasted_ggm)
cat("Error Holt-Winters:", rmse_test_hw, "\n")
cat("Error GGM:", rmse_test_ggm, "\n")
# Combine the actual and forecasted data into a data frame
plot_data <- data.frame(
Period = c("Last Period 1", "Last Period 2"),
Actual = actual_sales_m,
HoltWinters = forecasted_hw,
GGM = forecasted_ggm
)
plot_data_melt <- melt(plot_data, id.vars = "Period", variable.name = "Type", value.name = "Sales")
# Create a plot
ggplot(plot_data_melt, aes(x = Period, y = Sales, fill = Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Actual vs Forecasted Sales",
x = "Period",
y = "Sales",
fill = "Type") +
theme_minimal()
# Filter forecast to match the actual sales dates
forecast_sales_w_filtered <- forecast_sales_w[1:length(df_sales_w_test$sales_w), ]
# Combine actual and forecasted sales into a dataframe for plotting
plot_data <- data.frame(
ds = as.Date(df_sales_w_test$week),                  # Actual sales dates
Actual = df_sales_w_test$sales_w,                 # Actual sales
Forecast = forecast_sales_w_filtered$yhat         # Forecasted sales
)
# Plot using ggplot2
ggplot(plot_data, aes(x = ds)) +
geom_line(aes(y = Actual, color = "Actual Sales"), size = 1) +
geom_line(aes(y = Forecast, color = "Forecasted Sales"), size = 1, linetype = "dashed") +
labs(title = "Actual Sales vs Prophet Forecast",
x = "Date",
y = "Sales",
color = "Legend") +
theme_minimal()
# Filter forecast to match the actual sales dates
forecast_sales_d_filtered <- forecast_sales_d[1:length(test_sales_df$sales_cop), ]
# Combine actual and forecasted sales into a dataframe for plotting
plot_data_daily <- data.frame(
ds = as.Date(test_sales_df$date),               # Actual sales dates (daily granularity)
Actual = test_sales_df$sales_d,               # Actual sales
Forecast = forecast_sales_d_filtered$yhat       # Forecasted sales
)
forecast_sales_d
length(forecast_sales_d)
nrow(forecast_sales_d)
nrow(forecast_sales_w_filtered)
nrow(forecast_sales_w)
ggplot(df_merged_w, aes(x=week, y=sales_w)) +
geom_line() + ggtitle("Weekly Sales of Restaurant")
head(df_merged_w)
#Prophet model
# model with no seasonality
df_prophet_w <- df_merged_w[1:2]
colnames(df_prophet_w) = c("ds", "y")
df_prophet_w$y <- exp(df_prophet_w$y)
df_prophet_w
prophet_sales_w <- prophet(df_prophet_w)
# Filter forecast for November and December 2024
forecast_nov_dec <- forecast_sales_w %>%
filter(ds >= as.Date("2024-11-01") & ds <= as.Date("2024-12-31"))
# Filter forecast for November and December 2024
forecast_nov_dec_w <- forecast_sales_w %>%
filter(ds >= as.Date("2024-11-01") & ds <= as.Date("2024-12-31"))
forecast_nov_dec_w
# Filter forecast for November and December 2024
forecast_nov_dec_w <- forecast_sales_w %>%
filter(ds >= as.Date("2024-11-01") & ds <= as.Date("2024-12-31"))
forecast_nov_dec_w$yhat
# Filter forecast for November and December 2024
forecast_nov_dec_w <- forecast_sales_w %>%
filter(ds >= as.Date("2024-11-01") & ds <= as.Date("2024-12-31"))
plot(forecast_nov_dec_w$yhat)
# Filter forecast for November and December 2024
forecast_nov_dec_w <- forecast_sales_w %>%
filter(ds >= as.Date("2024-11-01") & ds <= as.Date("2024-12-31"))
plot(forecast_nov_dec_w$yhat)
lines(df_sales_w_test$sales_w)
# Filter forecast for November and December 2024
forecast_nov_dec_w <- forecast_sales_w %>%
filter(ds >= as.Date("2024-11-01") & ds <= as.Date("2024-12-31"))
plot(df_sales_w_test$sales_w)
lines(forecast_nov_dec_w$yhat)
# Filter forecast for November and December 2024
forecast_nov_dec_w <- forecast_sales_w %>%
filter(ds >= as.Date("2024-11-01") & ds <= as.Date("2024-12-31"))
plot(df_sales_w_test$sales_w)
lines(forecast_nov_dec_w$yhat)
nrow(forecast_nov_dec_w)
nrow(forecast_nov_dec_w)
nrow(df_sales_w_test)
# Filter forecast for November and December 2024
forecast_nov_dec_w <- forecast_sales_w %>%
filter(ds >= as.Date("2024-11-01") & ds <= as.Date("2025-01-01"))
plot(df_sales_w_test$sales_w)
lines(forecast_nov_dec_w$yhat)
forecast_sales_w
forecast_sales_w$ds
nrow(forecast_nov_dec_w)
nrow(df_sales_w_test)
# Filter forecast for November and December 2024
forecast_nov_dec_w <- forecast_sales_w %>%
filter(ds >= as.Date("2024-11-01") & ds <= as.Date("2025-01-05"))
plot(df_sales_w_test$sales_w)
lines(forecast_nov_dec_w$yhat)
# Plot the actual sales with black dots
plot(as.Date(df_sales_w_test$week), df_sales_w_test$sales_w,
type = "p",                             # Points for actual sales
pch = 16,                               # Solid circles
col = "black",                          # Black color for points
xlab = "Date",                          # X-axis label
ylab = "Sales",                         # Y-axis label
main = "Actual Sales vs Forecasted Sales (Nov-Dec 2024)")  # Title
# Add the forecast line in red
lines(as.Date(forecast_nov_dec_w$ds), forecast_nov_dec_w$yhat,
col = "red",                          # Red color for the line
lwd = 2)                              # Wider line
# Add a legend in the top right
legend("topright",
legend = c("Actual Sales", "Forecasted Sales"),
col = c("black", "red"),             # Colors matching the plot
pch = c(16, NA),                     # Solid dot for actual sales, none for line
lty = c(NA, 1),                      # Line for forecasted sales, none for dot
lwd = c(NA, 2))                      # Line width for the forecast
# Filter forecast for November and December 2024
forecast_nov_dec_d <- forecast_sales_d %>%
filter(ds >= as.Date("2024-11-01") & ds <= as.Date("2025-01-05"))
# Plot the actual sales with black dots
plot(as.Date(test_sales_df$date), test_sales_df$sales_cop,
type = "p",                             # Points for actual sales
pch = 16,                               # Solid circles
col = "black",                          # Black color for points
xlab = "Date",                          # X-axis label
ylab = "Sales",                         # Y-axis label
main = "Actual Sales vs Forecasted Sales (Nov-Dec 2024)")  # Title
# Add the forecast line in red
lines(as.Date(forecast_nov_dec_d$ds), forecast_nov_dec_d$yhat,
col = "red",                          # Red color for the line
lwd = 2)                              # Wider line
# Add a legend in the top right
legend("topright",
legend = c("Actual Sales", "Forecasted Sales"),
col = c("black", "red"),             # Colors matching the plot
pch = c(16, NA),                     # Solid dot for actual sales, none for line
lty = c(NA, 1),                      # Line for forecasted sales, none for dot
lwd = c(NA, 2))                      # Line width for the forecast
long_term_forecasted_hw <- forecast_hw$mean
long_term_forecasted_ggm <- ggm_future_inst_ts
long_term_forecasted_hw
long_term_forecasted_hw <- forecast_hw$mean
long_term_forecasted_ggm <- ggm_future_inst_ts
long_term_forecasted_ggm
ggm_future_inst_ts
long_term_forecasted_hw
# Define the date ranges for both series
dates_hw <- seq(as.Date("2024-11-01"), as.Date("2026-10-01"), by = "month")
dates_ggm <- seq(as.Date("2024-11-01"), as.Date("2027-11-01"), by = "month")
# Create data frames for the two series
df_hw <- data.frame(Date = dates_hw, Value = long_term_forecasted_hw)
df_ggm <- data.frame(Date = dates_ggm, Value = long_term_forecasted_ggm)
# Merge the two series on the common dates
df_merged <- merge(df_hw, df_ggm, by = "Date", suffixes = c("_hw", "_ggm"))
# Calculate the mean of both series where data is available
df_merged$Mean <- rowMeans(df_merged[, c("Value_hw", "Value_ggm")], na.rm = TRUE)
# Create the new time series
new_time_series <- data.frame(Date = df_merged$Date, Mean = df_merged$Mean)
long_term_forecasted_hw <- forecast_hw$mean
long_term_forecasted_ggm <- ggm_future_inst_ts
long_term_forecasted_hw <- forecast_hw$mean
long_term_forecasted_ggm <- ggm_future_inst_ts
long_term_forecast
long_term_forecasted_hw <- forecast_hw$mean
long_term_forecasted_ggm <- ggm_future_inst_ts
# Define the date ranges for both series
dates_hw <- seq(as.Date("2024-11-01"), as.Date("2026-10-01"), by = "month")
dates_ggm <- seq(as.Date("2024-11-01"), as.Date("2027-11-01"), by = "month")
# Create data frames for the two series
df_hw <- data.frame(Date = dates_hw, Value = long_term_forecasted_hw)
df_ggm <- data.frame(Date = dates_ggm, Value = long_term_forecasted_ggm)
# Merge the two series on the common dates
df_merged <- merge(df_hw, df_ggm, by = "Date", suffixes = c("_hw", "_ggm"))
# Calculate the mean of both series where data is available
df_merged$Mean <- rowMeans(df_merged[, c("Value_hw", "Value_ggm")], na.rm = TRUE)
# Create the new time series
long_term_forecast <- data.frame(Date = df_merged$Date, Mean = df_merged$Mean)
plot(long_term_forecast)
View(long_term_forecast)
view(sales_m_ts)
View(sales_m_ts)
View(df_merged_m)
