temp <- read_excel("data/other/temperature_data.xlsx")
temp[is.na(temp)] <- 0
rain[is.na(rain)] <- 0
plot(temp$tavg) # no zeros in temp : OK
plot(temp$tmedian) # no zeros in temp : OK- looks better than mean
# Explore data structure
str(sales)
str(eco_growth)
str(fx)
str(inflation)
str(unemployment)
str(google_trends)
str(rain)
str(temp) # this has NaNs, must fill somehow
plot(sales$sales_cop)
plot(sales$bar)
plot(sales$food)
# sales
## sales monthly
df_sales_m <- sales %>%
mutate(month = floor_date(date, "month")) %>% # Extract month
group_by(month) %>%
summarise(sales_m = sum(sales_cop), bar_m = sum(bar), food_m = sum(food)
)     # Summing values
head(df_sales_m)
## sales weekly
df_sales_w <- sales %>%
mutate(week = floor_date(date, "week")) %>% # Extract month
group_by(week) %>%
summarise(sales_w = sum(sales_cop), bar_w = sum(bar), food_w = sum(food))     # Summing values
head(df_sales_m)
head(df_sales_w)
# fx
df_fx_m <- fx %>%
mutate(month = floor_date(date, "month")) %>%
group_by(month) %>%
summarise(fx_m = mean(fx))
df_fx_w <- fx %>%
mutate(week = floor_date(date, "week")) %>%
group_by(week) %>%
summarise(fx_w = mean(fx))
head(df_fx_m)
head(df_fx_w)
# montly
df_google_m <- google_trends %>%
mutate(month = floor_date(date, "month")) %>%
group_by(month) %>%
summarise(google_m = mean(google_trends))
# weekly
df_google_w <- google_trends %>%
mutate(week = floor_date(date, "week")) %>%
group_by(week) %>%
summarise(google_w = mean(google_trends))
head(df_google_m)
head(df_google_w)
df_rain_g = rain %>%
group_by(date, region) %>%
summarise(rain_sum=sum(contribution_m3s))
df_rain_g  <- df_rain_g[df_rain_g$region=="ANTIOQUIA",]
head(df_rain_g)
# montly
df_rain_m <- df_rain_g %>%
mutate(month = floor_date(date, "month")) %>%
group_by(month) %>%
summarise(rain_m = sum(rain_sum))
# weekly
df_rain_w <- df_rain_g %>%
mutate(week = floor_date(date, "week")) %>%
group_by(week) %>%
summarise(rain_w = sum(rain_sum))
head(df_rain_m)
head(df_rain_w)
# temperature
# montly
df_temp_m <- temp %>%
mutate(month = floor_date(date, "month")) %>%
group_by(month) %>%
summarise(temp_m = mean(tmedian), prcp_m = sum(prcp))
# weekly
df_temp_w <- temp %>%
mutate(week = floor_date(date, "week")) %>%
group_by(week) %>%
summarise(temp_w = mean(tmedian), prcp_w = sum(prcp))
head(df_temp_m)
head(df_temp_w)
## Merge--------------
## daily data----------
#sales, rain, fx are the only ones daily
df_merged_d <- merge(sales, df_rain_g, by = "date", all = FALSE) # Inner join
df_merged_d <- merge(df_merged_d, fx, by = "date", all = FALSE) # Inner join
df_merged_d <- merge(df_merged_d, temp, by = "date", all = FALSE) # Inner join
head(df_merged_d)
### weekly data----------
df_merged_w <- merge(df_sales_w, df_rain_w, by="week", all=F)
df_merged_w <- merge(df_merged_w, df_google_w, by="week", all=F)
df_merged_w <- merge(df_merged_w, df_fx_w, by="week", all=F)
df_merged_w <- merge(df_merged_w, df_temp_w, by="week", all=F)
head(df_merged_w)
### monthly data----------
# change colnames
names(eco_growth) <- c("month", "ise")
names(inflation) <- c("month", "inflation")
names(unemployment) <- c("month", "unemployment")
df_merged_m <- merge(df_sales_m, df_rain_m, by="month", all=F)
nrow(df_merged_m)
df_merged_m <- merge(df_merged_m, df_fx_m, by="month", all=F)
nrow(df_merged_m)
df_merged_m <- merge(df_merged_m, df_google_m, by="month", all=F)
nrow(df_merged_m)
df_merged_m <- merge(df_merged_m, eco_growth, by="month", all=F) # only has until aug 2024
nrow(df_merged_m)
df_merged_m <- merge(df_merged_m, inflation, by="month", all=F)
nrow(df_merged_m)
df_merged_m <- merge(df_merged_m, unemployment, by="month", all=F)
nrow(df_merged_m)
df_merged_m <- merge(df_merged_m, df_temp_m, by="month", all=F)
nrow(df_merged_m)
# 3. Plots----------------
## 3.1 Sales----------------
# sales daily
ggplot(sales, aes(x=date, y=sales_cop)) +
geom_line() + ggtitle("Daily Sales of Restaurant")
# sales weekly
ggplot(df_sales_w, aes(x=week, y=sales_w)) +
geom_line() + ggtitle("Weekly Sales of Restaurant")
# sales montly
ggplot(df_sales_m, aes(x=month, y=sales_m)) +
geom_line() + ggtitle("Monthly Sales of Restaurant")
# sales daily
ggplot(sales, aes(x=date, y=food)) +
geom_line() + ggtitle("Daily Sales of Restaurant - Food")
# sales weekly
ggplot(df_sales_w, aes(x=week, y=food_w)) +
geom_line() + ggtitle("Weekly Sales of Restaurant - Food")
# sales montly
ggplot(df_sales_m, aes(x=month, y=food_m)) +
geom_line() + ggtitle("Monthly Sales of Restaurant - Food")
# sales daily
ggplot(sales, aes(x=date, y=bar)) +
geom_line() + ggtitle("Daily Sales of Restaurant - Bar")
# sales weekly
ggplot(df_sales_w, aes(x=week, y=bar_w)) +
geom_line() + ggtitle("Weekly Sales of Restaurant - Bar")
# sales montly
ggplot(df_sales_m, aes(x=month, y=bar_m)) +
geom_line() + ggtitle("Monthly Sales of Restaurant - Bar")
#Monthly
# Reshape the data to a long format
df_sales_m_long <- df_sales_m %>%
pivot_longer(cols = c(bar_m, food_m), names_to = "Category", values_to = "Value")
# Create the stacked bar plot
ggplot(df_sales_m_long, aes(x = month, y = Value, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
ggtitle("Monthly Sales of Restaurant") +
labs(y = "Sales", x = "Month", fill = "Category") +
theme_minimal()
# Weekly
# Reshape the data to a long format
df_sales_w_long <- df_sales_w %>%
pivot_longer(cols = c(bar_w, food_w), names_to = "Category", values_to = "Value")
# Create the stacked bar plot
ggplot(df_sales_w_long, aes(x = week, y = Value, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
ggtitle("Weekly Sales of Restaurant") +
labs(y = "Sales", x = "Week", fill = "Category") +
theme_minimal()
## 3.4 Seasonal plots-------------------------
df_sales_w_filtered <- df_sales_w %>%
filter(week >= ymd("2021-12-31"))
tseries_w <- ts(df_sales_w_filtered$sales_w , start = c(2022, 1), frequency = 52)
tseries_w
seasonplot(tseries_w, col = rainbow(3), year.labels = TRUE, main = "Seasonal Plot")
text(x = 1, y = max(tseries_w) - 1.5e7, labels = "2024", col = "blue")
#seasonplot monthly
head(df_sales_m)
df_sales_m_filtered <- df_sales_m %>%
filter(month >= ymd("2021-12-31"))
head(df_sales_m_filtered)
tseries_m <- ts(df_sales_m_filtered$sales_m , start = c(2022, 1), frequency = 12)
tseries_m
seasonplot(tseries_m, col = rainbow(3), year.labels = TRUE, main = "Seasonal Plot")
text(x = 1, y = max(tseries_m) - 1e6, labels = "2024", col = "blue")
## 3.5 Covariates ----------------------
### 3.5.1 economic variables-----------------------
# economic growth
ggplot(eco_growth, aes(x=month, y=ise)) +
geom_line() + ggtitle("Monthly activity in Colombia")
# fx
ggplot(fx, aes(x=date, y=fx)) +
geom_line() + ggtitle("Daily COP/USD")
# inflation
ggplot(inflation, aes(x=month, y=inflation)) +
geom_line() + ggtitle("Monthly inflation National")
# unemployment
ggplot(unemployment, aes(x=month, y=unemployment)) +
geom_line() + ggtitle("Montly trailing unemployment Medellin")
# google trends
ggplot(google_trends, aes(x=date, y=google_trends)) +
geom_line() + ggtitle("Weelkly Google trends 'Restaurantes'")
# rain
ggplot(df_rain_g, aes(x=date, y=rain_sum)) +
geom_line() + ggtitle("Daily rain approximated in Antioquia")
# temperature
ggplot(temp, aes(x=date, y=tmedian)) +
geom_line() + ggtitle("Daily Average temperature in Medellin")
# temperature
ggplot(temp, aes(x=date, y=tavg)) +
geom_line() + ggtitle("Daily Average temperature in Medellin")
# precipitation from temp
ggplot(temp, aes(x=date, y=prcp)) +
geom_line() + ggtitle("Daily  precipitation in Medellin")
# Exclude 'date' column
numeric_df_d <- df_merged_d[, sapply(df_merged_d, is.numeric)]
cor_matrix_d <- cor(numeric_df_d, use = "complete.obs")  # Use only complete rows
cor_matrix_d
numeric_df_w <- df_merged_w[, sapply(df_merged_w, is.numeric)]
cor_matrix_w <- cor(numeric_df_w, use = "complete.obs")  # Use only complete rows
cor_matrix_w
numeric_df_m <- df_merged_m[, sapply(df_merged_m, is.numeric)]
cor_matrix_m <- cor(numeric_df_m, use = "complete.obs")  # Use only complete rows
cor_matrix_m
### Plots----------
# Plot the Correlation Matrix
par(mfrow=c(1,1))
corrplot(cor_matrix_d, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
corrplot(cor_matrix_w, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
corrplot(cor_matrix_m, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
# rain has stronger correl than prcp
# drop prcp beacuse they "are the same"
df_merged_m <- df_merged_m %>% select(-prcp_m)
df_merged_w <- df_merged_w %>% select(-prcp_w)
df_merged_d <- df_merged_d %>% select(-prcp)
# drop avg temp
df_merged_d <- df_merged_d %>% select(-tavg)
colnames(df_merged_d)
# Variable Transformation-------------
# Vars for model
# Month
# Ensure the `month` column is in POSIXct format
df_merged_m$month <- as.POSIXct(df_merged_m$month)
# Create the numeric variable: an evenly increasing number
df_merged_m <- df_merged_m %>%
arrange(month) %>%  # Ensure data is sorted by month
mutate(numeric_month = row_number())  # Assign an increasing number
# Create the seasonal variable: the 12 different months as a factor
df_merged_m <- df_merged_m %>%
mutate(seasonal_month = factor(format(month, "%B"), levels = month.name))  # Month names as ordered factors
# Week
# Ensure the `week` column is in POSIXct format
df_merged_w$week <- as.POSIXct(df_merged_w$week)
# Create the numeric variable: an evenly increasing number
df_merged_w <- df_merged_w %>%
arrange(week) %>%  # Ensure data is sorted by week
mutate(numeric_week = row_number())  # Assign an increasing number
# Create the seasonal variable: the 12 different months as a factor
df_merged_w <- df_merged_w %>%
mutate(seasonal_month = factor(format(week, "%B"), levels = month.name))  # Month names as ordered factors
# Day
# Ensure the `day` column is in POSIXct format
df_merged_d$date <- as.POSIXct(df_merged_d$date)
# Create the numeric variable: an evenly increasing number
df_merged_d <- df_merged_d %>%
arrange(date) %>%  # Ensure data is sorted by day
mutate(numeric_day = row_number())  # Assign an increasing number
# Create the seasonal variable: the 12 different months as a factor
df_merged_d <- df_merged_d %>%
mutate(seasonal_month = factor(format(date, "%B"), levels = month.name))  # Month names as ordered factors
# Create a column indicating the day of the week
df_merged_d <- df_merged_d %>%
mutate(day_of_week = factor(weekdays(date), levels = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday")))  # Day of the week as ordered factor
## Autocorrelation--------------
# convert to time series
sales_d_ts <- ts(df_merged_d$sales_cop)
sales_w_ts <- ts(df_merged_w$sales_w)
sales_m_ts <- ts(df_merged_m$sales_m)
par(mfrow=c(1,1))
# Daily
tsdisplay(sales_d_ts)
# Weekly
tsdisplay(sales_w_ts)
# Weekly
tsdisplay(sales_w_ts)
# Daily
tsdisplay(sales_d_ts)
# Weekly
tsdisplay(sales_w_ts)
# Montly
tsdisplay(sales_m_ts)
#df_merged_m = subset(df_merged_m, select = -c(month) )
## Log transformation----------
# Monthly
df_merged_m <- df_merged_m %>%
mutate(across(where(is.numeric) & !all_of(c("unemployment", "inflation")), ~ log(. + 1)))
# Weekly
df_merged_w <- df_merged_w %>%
mutate(across(where(is.numeric), ~ log(. + 1)))
# Daily
# Weekly
df_merged_d <- df_merged_d %>%
mutate(across(where(is.numeric), ~ log(. + 1)))
#5.  Models----------------
## 5.1 Linear models-----------
### Monthly----------------
# see the dataframe
head(df_merged_m)
# Model 0, just trend
ols0 <- lm(sales_m ~ numeric_month, data=df_merged_m)
summary(ols0)
par(mfrow = c(2,2))
plot(ols0)
df_merged_m$predicted_sales0 <- predict(ols0, newdata = df_merged_m)
# Model 1: trend + season
colnames(df_merged_m)
ols1 <- lm(sales_m ~numeric_month + seasonal_month, data=df_merged_m)
summary(ols1)
# only time is relevant, no seasonality
plot(ols1)
df_merged_m$predicted_sales1 <- predict(ols1, newdata = df_merged_m)
# Plot actual vs predicted values for both models
ggplot(df_merged_m, aes(x = month)) +
geom_line(aes(y = exp(sales_m), color = "Actual Sales"), size = 1) +
geom_line(aes(y = exp(predicted_sales0), color = "Predicted Sales (Model 0)"), linetype = "dashed", size = 1) +
geom_line(aes(y = exp(predicted_sales1), color = "Predicted Sales (Model 1)"), linetype = "dotted", size = 1) +
labs(title = "Actual vs Predicted Monthly Sales",
x = "Month",
y = "Sales",
color = "Legend") +
theme_economist() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Model 2
# Initial model (ols2_full)
ols2_full <- lm(sales_m ~ numeric_month + seasonal_month + unemployment + ise + fx_m + google_m + temp_m + rain_m, data = df_merged_m)
summary(ols2_full)
# Drop seasonal_month (rename model to ols2_no_seasonal_month)
ols2_no_seasonal_month <- lm(sales_m ~ numeric_month + unemployment + ise + fx_m + google_m + temp_m + rain_m, data = df_merged_m)
summary(ols2_no_seasonal_month)
# Perform ANOVA test between ols2_full and ols2_no_seasonal_month
anova(ols2_full, ols2_no_seasonal_month)
# Drop ise (rename model to ols2_no_seasonal_month_no_ise)
ols2_no_seasonal_month_no_ise <- lm(sales_m ~ numeric_month + unemployment + fx_m + google_m + temp_m + rain_m, data = df_merged_m)
summary(ols2_no_seasonal_month_no_ise)
# Perform ANOVA test between ols2_no_seasonal_month and ols2_no_seasonal_month_no_ise
anova(ols2_no_seasonal_month, ols2_no_seasonal_month_no_ise)
# Drop rain
ols2_no_rain <- lm(sales_m ~ numeric_month + unemployment + fx_m + google_m + temp_m, data = df_merged_m)
summary(ols2_no_rain)
anova(ols2_no_seasonal_month_no_ise, ols2_no_rain)
# can drop, pvalue >0.05
ols2_final <- ols2_no_rain
summary(ols2_final)
plot(ols2_final)
# check for co-linearity
vif_values <- vif(ols2_final)
print(vif_values)
# predictions
df_merged_m$predicted_sales2 <- predict(ols2_final, newdata = df_merged_m)
# plot of actual vs predicted values
ggplot(df_merged_m, aes(x = month)) +
geom_line(aes(y = exp(sales_m), color = "Actual Sales"), size = 1) +
geom_line(aes(y = exp(predicted_sales2), color = "Predicted Sales (Model 2)"), linetype = "dashed", size = 1) +
labs(title = "Actual vs Predicted Monthly Sales (Model 2)",
x = "Month",
y = "Sales",
color = "Legend") +
theme_economist() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df_merged_m, aes(x = month)) +
geom_line(aes(y = exp(sales_m), color = "Actual Sales"), size = 1) +
geom_line(aes(y = exp(predicted_sales0), color = "Predicted Sales (Model 0)"), linetype = "dashed", size = 1) +
geom_line(aes(y = exp(predicted_sales1), color = "Predicted Sales (Model 1)"), linetype = "dotted", size = 1) +
geom_line(aes(y = exp(predicted_sales2), color = "Predicted Sales (Model 2)"), linetype = "dotdash", size = 1) +
labs(title = "Actual vs Predicted Monthly Sales for Models 0, 1, and 2",
x = "Month",
y = "Sales",
color = "Legend") +
theme_economist() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
head(df_merged_w)
# Drop first two weeks bc there were no sales
df_merged_w <- df_merged_w %>% slice(-1, -2)
# Model 0A
colnames(df_merged_w)
ols0w <- lm(sales_w ~numeric_week, data=df_merged_w)
summary(ols0w)
plot(ols0w)
df_merged_w$predicted_sales0 <- predict(ols0w, newdata = df_merged_w)
# Model 1A: Trend and seasonality
ols1w <- lm(sales_w ~numeric_week + seasonal_month, data=df_merged_w)
summary(ols1w)
plot(ols1w)
df_merged_w$predicted_sales1 <- predict(ols1w, newdata = df_merged_w)
# plot models
ggplot(df_merged_w, aes(x = week)) +
geom_line(aes(y = exp(sales_w), color = "Actual Sales"), size = 1) +
geom_line(aes(y = exp(predicted_sales0), color = "Model 0"), linetype = "dashed", size = 1) +
geom_line(aes(y = exp(predicted_sales1), color = "Model 1"), linetype = "dotted", size = 1) +
labs(title = "Actual vs Predicted  Sales",
x = "Week",
y = "Sales",
color = "Legend") +
theme_economist() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Model 2A: Experiments
colnames(df_merged_w)
ols2w_full <- lm(sales_w ~numeric_week + seasonal_month+
rain_w + google_w + temp_w, data=df_merged_w)
summary(ols2w_full)
# Drop seasonal month
ols2w_a <- lm(sales_w ~numeric_week +
rain_w + google_w + temp_w, data=df_merged_w)
summary(ols2w_a)
anova(ols2w_full, ols2w_a)
# p-value > a, so can drop seasonal month
# now drop google
ols2w_b <- lm(sales_w ~numeric_week +
rain_w + temp_w, data=df_merged_w)
summary(ols2w_b)
anova(ols2w_a, ols2w_b)
df_merged_w$predicted_sales2 <- predict(ols2w_b, newdata = df_merged_w)
# plot models
ggplot(df_merged_w, aes(x = week)) +
geom_line(aes(y = exp(sales_w), color = "Actual Sales"), size = 1) +
geom_line(aes(y = exp(predicted_sales0), color = "Model 0"), linetype = "dashed", size = 1) +
geom_line(aes(y = exp(predicted_sales1), color = "Model 1"), linetype = "dashed", size = 1) +
geom_line(aes(y = exp(predicted_sales2), color = "Model 2"), linetype = "dashed", size = 1) +
labs(title = "Actual vs Predicted  Sales",
x = "Week",
y = "Sales",
color = "Legend") +
theme_economist() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
### Daily---------------------
head(df_merged_d,20)
# drop first 18 days, sales are 0
df_merged_d <- df_merged_d %>%
filter(sales_cop != 0)
head(df_merged_d)
# Check column names for the daily dataframe
colnames(df_merged_d)
# Model 0A: Simple linear regression
ols0d <- lm(sales_cop ~ numeric_day, data = df_merged_d)
summary(ols0d)
plot(ols0d)
df_merged_d$predicted_sales0 <- predict(ols0d, newdata = df_merged_d)
# Model 1A: Trend and seasonality (day and month)
ols1d <- lm(sales_cop ~ numeric_day + seasonal_month + day_of_week, data = df_merged_d)
summary(ols1d)
plot(ols1d)
df_merged_d$predicted_sales1 <- predict(ols1d, newdata = df_merged_d)
ggplot(df_merged_d, aes(x = date)) +
geom_point(aes(y = exp(sales_cop), color = "Actual Sales"), size = 2) + # Actual sales as dots
geom_line(aes(y = exp(predicted_sales0), color = "Model 0"),  size = 1) + # Model 0 as solid line
geom_line(aes(y = exp(predicted_sales1), color = "Model 1"),linetype ="dashed", size = 1) + # Model 1 as solid line
labs(title = "Actual vs Predicted Sales (Daily)",
x = "Day",
y = "Sales",
color = "Legend") +
theme_economist() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Full model and var selection
colnames(df_merged_d)
ols2d_full <- lm(sales_cop ~ numeric_day + seasonal_month + day_of_week+
rain_sum + tmedian, data = df_merged_d)
summary(ols2d_full)
plot(ols2d_full)
# Looks like sesonal month does not matter
ols2d_a <- lm(sales_cop ~ numeric_day + day_of_week+
rain_sum + tavg, data = df_merged_d)
# Looks like sesonal month does not matter
ols2d_a <- lm(sales_cop ~ numeric_day + day_of_week+
rain_sum + tmedian, data = df_merged_d)
summary(ols2d_a)
anova(ols2d_full, ols2d_a)
# According to anova, cannot remove because there is extra information,
# but only september matters, and for no other model it has been insightfull
# should have impact in july, august, december and february, which has not
# so we still remove it
df_merged_d$predicted_sales2 <- predict(ols2d_a, newdata = df_merged_d)
ggplot(df_merged_d, aes(x = date)) +
geom_point(aes(y = exp(sales_cop), color = "Actual Sales"), size = 2) + # Actual sales as dots
geom_line(aes(y = exp(predicted_sales2), color = "Model 2"),linetype ="dashed", size = 1) + # Model 2 as dashed line
labs(title = "Actual vs Predicted Sales (Daily)",
x = "Day",
y = "Sales",
color = "Legend") +
theme_economist() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## 5.2 Time Series----------------
# After running models we see that there is still room to improve so we turn to time series modelling
### Monthly---------
# Check for autocorrelation
tsdisplay(sales_m_ts)
install.packages("GGally")
library(GGally)
View(df_merged_w)
## 3.6 Pairplot-----------------
ggpairs(df_merged_w,
columns = 2:9)
colnames(df_merged_m)
ggpairs(df_merged_m,
columns = 2:12)
## 3.6 Pairplot-----------------
ggpairs(df_merged_d,
columns = 2:15)
## 3.6 Pairplot-----------------
df_merged_d <- subset(df_merged_d, select = -region)
ggpairs(df_merged_d,
columns = 2:15)
colnames(df_merged_d)
ggpairs(df_merged_d,
columns = 2:8)
