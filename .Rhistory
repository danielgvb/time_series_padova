# Model Multiplicative follows the data better,
# and residuals are slightly better
# forecast
# save the forecast of the second model
forecast_hw1 <- forecast(hw1_m, h=12)
forecast_hw2 <- forecast(hw2_m, h=12)
# Forecast plot
# Plot the time series with both forecasts
autoplot(sales_m_ts) +
autolayer(forecast_hw1$mean, series="Additive Holt-Winters Forecast", PI=F) +
autolayer(forecast_hw2$mean, series="Multiplicative Holt-Winters Forecast", PI=F) +
ggtitle("Sales Forecast with Holt-Winters Models") +
xlab("Time") +
ylab("Sales") +
scale_color_manual(
values=c("Additive Holt-Winters Forecast" = "blue",
"Multiplicative Holt-Winters Forecast" = "red")
) +
theme_minimal() +
theme(legend.position = "top", legend.title = element_blank())
# autoplot
autoplot(sales_m_ts)+
autolayer(hw2_m, series="Holt-Winters' method", PI=F)
#### Weekly------------------------------
autoplot(sales_w_ts)
head(df_merged_w)
head(sales_w_ts)
# adjust timeseries:
sales_w_ts <- ts(sales_w_ts, frequency=52, start=c(2021, 10,31))
# experiment to evaluate max frequency of holt winters method in R
# Find the grouping factor for 24 periods in a year (every 2.1667 weeks per period)
weeks_per_period <- 52 / 24
group <- floor((seq_along(sales_w_ts) - 1) / weeks_per_period)
# Aggregate by summing (or averaging)
sales_bimonthly <- tapply(sales_w_ts, group, sum)
# Create a new time series with frequency 24
sales_bimonthly_ts <- ts(sales_bimonthly, frequency=24, start=c(2021, 10))
autoplot(sales_w_ts)
autoplot(sales_bimonthly_ts)
#hw1_w<- hw(sales_bw_ts, seasonal="additive") # does not work
#hw2_w<- hw(sales_w_ts, seasonal="multiplicative")
hw2_w<- hw(sales_bimonthly_ts, seasonal="multiplicative") # Works
# Since we are particularly interested in weekly ts,
# we dont continue with HW
autoplot(sales_bimonthly_ts)+
autolayer(hw2_w, series="Holt-Winters' method", PI=F)
# 7. ARIMA Models----------------------------
## 7.1 Standard ARIMA---------------------------------
## Montly------------------
# see if series is stationary
adf.test(sales_m_ts) #H0, series is non-stationary
# p-val > 0.05 => dont reject, non stationary: series is not stationary
adf.test(diff(sales_m_ts)) #H0, series is non-stationary
# see the acf and pacf
tsdisplay(diff(sales_m_ts))
# PACF suggest AR-1 ?
# ACF suggests MA-1 ?
### Manual ARIMA------------
# ARIMA(p,d,q) = (1,1,0)
arima1_m<- Arima(sales_m_ts, order=c(1,1,0))
summary(arima1_m)
# study residual to see if is a good model
resid1_m<- residuals(arima1_m)
tsdisplay(resid1_m)
# Residuals seem stationary
### Auto-ARIMA------------
arima2_m <- auto.arima(sales_m_ts)
summary(arima2_m)
summary(arima1_m)
# AIC is almost the same, but keep the AR-1
# study residual to see if is a good model
resid2_m<- residuals(arima2_m)
tsdisplay(resid2_m)
## Weekly------------------
# see if series is stationary
adf.test(sales_w_ts) #H0, series is non-stationary
# p-val > 0.05 => dont reject, non stationary: series is not stationary
adf.test(diff(sales_w_ts)) # after diff is sationary
# see the acf and pacf
tsdisplay(diff(sales_w_ts))
# PACF suggest AR-1
#ACF suggest MA-1
### Manual ARIMA------------
# ARIMA(p,d,q) = (1,1,0)
arima1_w<- Arima(sales_w_ts, order=c(1,1,0))
summary(arima1_w)
# study residual to see if is a good model
resid1_w<- residuals(arima1_w)
tsdisplay(resid1_w)
# Residuals seem stationary
### Auto-ARIMA------------
arima2_w <- auto.arima(sales_w_ts)
summary(arima2_w)
summary(arima1_w)
# Autoarima is better
# study residual to see if is a good model
resid2_w<- residuals(arima2_w)
tsdisplay(resid2_w)
## Daily------------------
# see if series is stationary
adf.test(sales_d_ts) #H0, series is non-stationary
# p-val < 0.05 =>  reject non stationary: series might be stationary
# no need for differencing (?)
# see the acf and pacf
tsdisplay(sales_d_ts)
# But has correlation of great order
# ACF and PACF show a lot of seasonality
# try with 2 differences
### Manual ARIMA------------
# ARIMA(p,d,q) = (2,1,0)
arima1_d<- Arima(sales_d_ts, order=c(1,0,1))
summary(arima1_d)
# study residual to see if is a good model
resid1_d<- residuals(arima1_d)
tsdisplay(resid1_d)
# Residuals are not stationary - they have autocorrelation
### Auto-ARIMA------------
arima2_d <- auto.arima(sales_d_ts)
summary(arima2_d) # order (5,1,3)
summary(arima1_d)
# AIC is better in autoarima
# study residual to see if is a good model
resid2_d<- residuals(arima2_d)
tsdisplay(resid2_d)
# resids have autocorrelation still
## 7.2 SARIMA----------------------------
## Daily-------------------------
tsdisplay(sales_d_ts) #
tsdisplay(diff(sales_d_ts))
sarima1_d<- Arima(sales_d_ts, order=c(0,1,1), seasonal=c(0,0,1))
summary(sarima1_d)
# study residual to see if is a good model
resid1_ds<- residuals(sarima1_d)
tsdisplay(resid1_ds)
# autocorrelation still present
# Fit auto.arima with seasonal components
sarima2_d <- auto.arima(sales_d_ts, seasonal=TRUE)
summary(sarima2_d)
# model 2 is better, lower AIC
resid2_ds<- residuals(sarima2_d)
tsdisplay(resid2_ds)
#still some autocorrelation at lags 5,9
# check for autocorrelation
Box.test(residuals(sarima2_d), lag=10, type="Ljung-Box")
# A low p-value (<0.05) suggests residual autocorrelation.
# Residuals have autocorrelation
# Need to adress by doing SARIMAX
## 7.3 SARIMAX---------------------
### Daily--------------------------
# readefine sales_d_ts
head(df_merged_d)
sales_d_ts <- ts(exp(df_merged_d$sales_cop), frequency=365, start=c(2021, 334))  # 334 is November 30
seasonal_sales_d_ts <- ts(exp(df_merged_d$sales_cop), frequency=7, start=c(2021, 334))  # 334 is November 30
plot(sales_d_ts)
tsdisplay(sales_d_ts,lag.max = 30)
tsdisplay(seasonal_sales_d_ts,lag.max = 30)
# define regresors
# Select specific columns by name
x_regressors_d <- df_merged_d %>% select(rain_sum, fx, tmedian)
# Apply the exponential function to each column
x_regressors_d <- as.data.frame(apply(x_regressors_d, 2, exp))
# Convert to a matrix for ARIMA modeling
x_regressors_d <- as.matrix(x_regressors_d)
# fit the model on sales
# Fit an auto.arima model with seasonal component and external regressors
sarimax_model_d <- auto.arima(
sales_d_ts,
seasonal = TRUE,               # Enable seasonal components
xreg = x_regressors_d          # External regressors
)
# Display the summary of the fitted model
summary(sarimax_model_d)
# Validate residuals
checkresiduals(sarimax_model_d)
# fit the model on seasonal sales
# Fit an auto.arima model with seasonal component and external regressors
sarimax_model_d2 <- auto.arima(
seasonal_sales_d_ts,
seasonal = TRUE,               # Enable seasonal components
xreg = x_regressors_d          # External regressors
)
# Display the summary of the fitted model
summary(sarimax_model_d2)
# Validate residuals
checkresiduals(sarimax_model_d2)
# they still escape the confidence intervals
resid_sarimax2_seasonal <- residuals(sarimax_model_d2)
adf.test(resid_sarimax2_seasonal)
Box.test(resid_sarimax2_seasonal, lag = 10, type = "Ljung-Box")
# Ljung Box indicates resids are white noise, at p-val 0.05
# But ADF Test says the resids are stationary
tsdisplay(resid_sarimax2_seasonal)
# set a search for best model
sarimax_model_d3 <- auto.arima(
seasonal_sales_d_ts,
seasonal = TRUE,
xreg = x_regressors_d,
max.p = 5, max.q = 5, max.P = 2, max.Q = 2,
stepwise = FALSE, approximation = FALSE)
# get residuals
resid_sarimax3_seasonal <- residuals(sarimax_model_d3)
# ADF Test for stationarity
adf.test(resid_sarimax3_seasonal)
# are stationary according to adf test
# Ljung-Box Test for autocorrelation
Box.test(resid_sarimax3_seasonal, lag = 10, type = "Ljung-Box")
# serial correlation accoriding to this
# ACF and PACF plots
tsdisplay(resid_sarimax3_seasonal, lag.max = 30)
# we see lags with correlation
# 8. Model Mixture--------------
## 8.1 GGM + SARIMA----------------
### Weekly------------------------------
#### GGM-------------------------------
summary(ggm1_w) # this one is best model found
pred_GGM_w<- predict(ggm1_w, newx=c(1:length(sales_w_ts)))
pred_GGM_w.inst<- make.instantaneous(pred_GGM_w)
plot(sales_w_ts, type= "b",xlab="Week", ylab="Weekly Sales",  pch=16, lty=3, cex=0.6)
lines(pred_GGM_w.inst, lwd=2, col=2)
##SARMAX refinement
fit.sales_w<- fitted(ggm1_w)
sarima_w <- Arima(cumsum(sales_w_ts), order = c(1,0,1), seasonal=list(order=c(0,0,1), period=52), xreg = fit.sales_w)
fit.sales_w<- fitted(ggm1_w)
sarima_w <- Arima(cumsum(sales_w_ts), order = c(1,0,1), seasonal=list(order=c(0,0,1), period=52), xreg = fit.sales_w)
summary(sarima_w)
sarima_w <- Arima(cumsum(sales_w_ts), order = c(1,0,1), seasonal=list(order=c(0,0,1), period=52), xreg = fit.sales_w)
summary(ggm1_w) # this one is best model found
pred_GGM_w<- predict(ggm1_w, newx=c(1:length(sales_w_ts)))
pred_GGM_w.inst<- make.instantaneous(pred_GGM_w)
plot(sales_w_ts, type= "b",xlab="Week", ylab="Weekly Sales",  pch=16, lty=3, cex=0.6)
lines(pred_GGM_w.inst, lwd=2, col=2)
lines(pred_GGM_w.inst, lwd=2, col=1)
lines(pred_GGM_w.inst, lwd=2, col=1)
lines(pred_GGM_w.inst, lwd=2, col=1)
plot(pred_GGM_w.inst, lwd=2, col=1)
lines(pred_GGM_w.inst, lwd=2, col=1)
plot(sales_w_ts, type= "b",xlab="Week", ylab="Weekly Sales",  pch=16, lty=3, cex=0.6)
lines(pred_GGM_w.inst, lwd=2, col=1)
plot(pred_GGM_w.inst, lwd=2, col=1)
diff <- sales_w_ts - pred_GGM_w.inst
diff
plot(diff)
lines(diff)
lines(diff)
plot(sales_w_ts, type= "b",xlab="Week", ylab="Weekly Sales",  pch=16, lty=3, cex=0.6)
lines(diff)
lines(pred_GGM_w.inst, lwd=2, col=1)
lines(pred_GGM_w.inst)
plot(pred_GGM_w.inst)
pred_GGM_w<- predict(ggm1_w, newx=c(1:length(sales_w_ts)))
pred_GGM_w.inst<- make.instantaneous(pred_GGM_w)
pred_GGM_w.inst
sales_w_ts
pred_GGM_w.inst
pred_GGM_w.inst
typeof(pred_GGM_w.inst)
sales_w_ts
start_time <- start(sales_w_ts)  # Get start time from sales_w_ts
frequency <- frequency(sales_w_ts)  # Get frequency from sales_w_ts
# Convert pred_GGM to a numeric vector
pred_GGM_vec <- unlist(pred_GGM)  # Flatten the list to a numeric vector
# Convert pred_GGM to a numeric vector
pred_GGM_w_vec <- unlist(pred_GGM_w.inst)  # Flatten the list to a numeric vector
start_time_w <- start(sales_w_ts)  # Get start time from sales_w_ts
frequency_w <- frequency(sales_w_ts)  # Get frequency from sales_w_ts
# Convert pred_GGM to a numeric vector
pred_GGM_w_vec <- unlist(pred_GGM_w.inst)  # Flatten the list to a numeric vector
# Create the time series for pred_GGM
pred_GGM_w_ts <- ts(pred_GGM_w_vec, start = start_time_w, frequency = frequency_w)
plot(sales_w_ts, type= "b",xlab="Week", ylab="Weekly Sales",  pch=16, lty=3, cex=0.6)
lines(pred_GGM_ts, col = "red", lty = 2)
plot(sales_w_ts, type= "b",xlab="Week", ylab="Weekly Sales",  pch=16, lty=3, cex=0.6)
lines(pred_GGM_w_ts, col = "red", lty = 2)
fit.sales_w<- fitted(ggm1_w)
fit.sales_w
pred_GGM_w<- predict(ggm1_w, newx=matrix(1:length(sales_w_ts), ncol=1))
pred_GGM_w.inst<- make.instantaneous(pred_GGM_w)
pred_GGM_w.inst
# set same timeframe for GGM preds
start_time_w <- start(sales_w_ts)  # Get start time from sales_w_ts
frequency_w <- frequency(sales_w_ts)  # Get frequency from sales_w_ts
# Convert pred_GGM to a numeric vector
pred_GGM_w_vec <- unlist(pred_GGM_w.inst)  # Flatten the list to a numeric vector
# Create the time series for pred_GGM
pred_GGM_w_ts <- ts(pred_GGM_w_vec, start = start_time_w, frequency = frequency_w)
plot(sales_w_ts, type= "b",xlab="Week", ylab="Weekly Sales",  pch=16, lty=3, cex=0.6)
lines(pred_GGM_w_ts, col = "red", lty = 2)
fit.sales_w <- fitted(ggm1_w)  # Predicted values from the GGM model
if (length(fit.sales_w) != length(sales_w_ts)) {
stop("fit.sales_w and sales_w_ts lengths do not match")
}
sarima_w <- Arima(
cumsum(sales_w_ts),
order = c(1, 0, 1),
seasonal = list(order = c(0, 0, 1), period = 52),
xreg = fit.sales_w
)
summary(fit.sales_w)
length(fit.sales_w) == length(cumsum(sales_w_ts))  # Should return TRUE
fit.sales_w <- scale(fit.sales_w) # scale regresor to make convergence
sarima_w <- Arima(
cumsum(sales_w_ts),
order = c(1, 0, 1),
seasonal = list(order = c(0, 0, 1), period = 52),
xreg = fit.sales_w
)
sarima_w <- Arima(
cumsum(sales_w_ts),
order = c(0, 1, 1),  # Simplified non-seasonal ARIMA
seasonal = list(order = c(0, 1, 0), period = 52),  # Simplified seasonal part
xreg = fit.sales_w
)
sarima_w <- Arima(
cumsum(sales_w_ts),
order = c(0, 1, 1),  # Simplified non-seasonal ARIMA
seasonal = list(order = c(0, 1, 0), period = 52),  # Simplified seasonal part
xreg = fit.sales_w
)
sarima_w <- Arima(
cumsum(sales_w_ts),
order = c(1, 0, 1),
seasonal = list(order = c(0, 0, 1), period = 52),
xreg = fit.sales_w
)
sarima_w_no_xreg <- Arima(cumsum(sales_w_ts), order = c(1, 0, 1), seasonal = list(order = c(0, 0, 1), period = 52))
sarima_w_no_xreg <- Arima(
cumsum(sales_w_ts),
order = c(1, 0, 1),
seasonal = list(order = c(0, 0, 1), period = 52)
)
sales_w_ts_scaled <- scale(cumsum(sales_w_ts))  # Scale the time series
sarima_w <- Arima(
sales_w_ts_scaled,
order = c(1, 0, 1),
seasonal = list(order = c(0, 0, 1), period = 52),
xreg = fit.sales_w
)
summary(sarima_w)
# Extract fitted values from the SARIMA model
fitted_values_scaled <- fitted(sarima_w)
# Retrieve scaling parameters to rescale the fitted values
scaling_center <- attr(sales_w_ts_scaled, "scaled:center")
scaling_scale <- attr(sales_w_ts_scaled, "scaled:scale")
# Rescale the fitted values back to the original scale
fitted_values_original <- fitted_values_scaled * scaling_scale + scaling_center
# Plot original time series vs fitted values
plot(cumsum(sales_w_ts), type = "l", col = "blue", lty = 1,
main = "Original Time Series vs Fitted Values",
xlab = "Time", ylab = "Values")
lines(fitted_values_original, col = "red", lty = 2)
# Add legend for clarity
legend("topright", legend = c("Original Time Series", "Fitted Values"),
col = c("blue", "red"), lty = c(1, 2))
# plot
# Extract fitted cumulative values
fitted_cumulative <- fitted(sarima_w)
# Convert fitted cumulative values to instantaneous values
fitted_instantaneous <- diff(c(fitted_cumulative, NA))  # Use NA to keep the length consistent
# Rescale the fitted instantaneous values to the original scale if the data was scaled
fitted_instantaneous_rescaled <- fitted_instantaneous * scaling_scale + scaling_center
# Plot original instantaneous values vs fitted instantaneous values
plot(sales_w_ts, type = "b", col = "blue", lty = 1, pch = 16,
main = "Original vs Fitted Instantaneous Values",
xlab = "Time", ylab = "Instantaneous Values")
lines(fitted_instantaneous_rescaled, col = "red", lty = 2)
# Add legend
legend("topright", legend = c("Original Instantaneous", "Fitted Instantaneous"),
col = c("blue", "red"), lty = c(1, 2), pch = c(16, NA))
plot(fitted_instantaneous_rescaled, col = "red", lty = 2)
# Plot original instantaneous values vs fitted instantaneous values
plot(sales_w_ts, type = "b", col = "blue", lty = 1, pch = 16,
main = "Original vs Fitted Instantaneous Values",
xlab = "Time", ylab = "Instantaneous Values")
lines(fitted_instantaneous_rescaled, col = "red", lty = 2)
# plot
# Extract fitted cumulative values
fitted_cumulative <- fitted(sarima_w)
# Convert fitted cumulative values to instantaneous values
fitted_instantaneous <- diff(c(fitted_cumulative, NA))  # Include NA to maintain alignment
# Rescale the fitted instantaneous values to the original scale
fitted_instantaneous_rescaled <- fitted_instantaneous * scaling_scale + scaling_center
# Create a time series object for the fitted instantaneous values
fitted_instantaneous_ts <- ts(
fitted_instantaneous_rescaled,
start = start(sales_w_ts),
frequency = frequency(sales_w_ts)
)
# Plot original instantaneous values vs fitted instantaneous values
plot(sales_w_ts, type = "b", col = "blue", lty = 1, pch = 16,
main = "Original vs Fitted Instantaneous Values",
xlab = "Time", ylab = "Instantaneous Values")
lines(fitted_instantaneous_ts, col = "red", lty = 2)
plot(fitted_instantaneous_ts, col = "red", lty = 2)
# Plot original instantaneous values vs fitted instantaneous values
plot(sales_w_ts, type = "b", col = "blue", lty = 1, pch = 16,
main = "Original vs Fitted Instantaneous Values",
xlab = "Time", ylab = "Instantaneous Values")
lines(fitted_instantaneous_ts, col = "red", lty = 2)
# Add legend
legend("topright", legend = c("Original Instantaneous", "Fitted Instantaneous"),
col = c("blue", "red"), lty = c(1, 2), pch = c(16, NA))
plot(fitted_instantaneous_ts, col = "red", lty = 2)
# Plot original instantaneous values vs fitted instantaneous values
plot(sales_w_ts, type = "b", col = "blue", lty = 1, pch = 16,
main = "Original vs Fitted Instantaneous Values",
xlab = "Time", ylab = "Instantaneous Values")
lines(fitted_instantaneous_ts, col = "red",lwd=3 , lty = 2)
lines(fitted_instantaneous_ts, col = "red",lwd=3 , lty = 1)
plot(fitted_instantaneous_ts, col = "red",lwd=3 , lty = 1)
# Plot original instantaneous values vs fitted instantaneous values
plot(sales_w_ts, type = "p", col = "blue", pch = 16,
main = "Original vs Fitted Instantaneous Values",
xlab = "Time", ylab = "Instantaneous Values")
# Add the fitted instantaneous values as a line
lines(fitted_instantaneous_ts, col = "red", lwd = 3, lty = 1)
# Add the fitted instantaneous values as a line
lines(fitted_instantaneous_ts, col = "red", lwd = 3, lty = 1)
# Add the fitted instantaneous values as a line
plot(fitted_instantaneous_ts, col = "red", lwd = 3, lty = 1)
# Add the fitted instantaneous values as a line
lines(fitted_instantaneous_ts, col = "red", lwd = 3, lty = 1)
# Add the fitted instantaneous values as a line
lines(fitted_instantaneous_ts, col = "red", lwd = 3, lty = 1)
# Plot original instantaneous values vs fitted instantaneous values
plot(sales_w_ts, type = "p", col = "blue", pch = 16,
main = "Original vs Fitted Instantaneous Values",
xlab = "Time", ylab = "Instantaneous Values")
# Add the fitted instantaneous values as a line
lines(fitted_instantaneous_ts, col = "red", lwd = 3, lty = 1)
typeof(fitted_instantaneous_ts)
typeof(sales_w_ts)
chr(sales_w_ts)
str(sales_w_ts)
str(fitted_instantaneous_ts)
fitted_instantaneous_rescaled
plot(fitted_instantaneous_rescaled)
sarima_w <- Arima(
sales_w_ts_scaled,
order = c(1, 0, 1),
seasonal = list(order = c(0, 0, 1), period = 52),
xreg = fit.sales_w
)
# plot
# Extract fitted cumulative values
fitted_cumulative <- fitted(sarima_w)
fitted_cumulative
fit.sales_w <- fitted(ggm1_w)  # Predicted values from the GGM model
if (length(fit.sales_w) != length(sales_w_ts)) {
stop("fit.sales_w and sales_w_ts lengths do not match")
}
summary(fit.sales_w)
length(fit.sales_w) == length(cumsum(sales_w_ts))  # Should return TRUE
fit.sales_w <- scale(fit.sales_w) # scale regresor to make convergence
sales_w_ts_scaled <- scale(cumsum(sales_w_ts))  # Scale the time series because if not will not reach convergence
sarima_w <- Arima(
sales_w_ts_scaled,
order = c(1, 0, 1),
seasonal = list(order = c(0, 0, 1), period = 52),
xreg = fit.sales_w
)
summary(sarima_w)
# get fitted values
# Extract the fitted cumulative values from the SARIMA model
fitted_cumulative <- fitted(sarima_w)
fitted_cumulative
plot(fitted_cumulative)
# Reverse scaling transformation to get fitted cumulative values in the original scale
scaling_center <- attr(sales_w_ts_scaled, "scaled:center")
scaling_scale <- attr(sales_w_ts_scaled, "scaled:scale")
fitted_cumulative_original <- fitted_cumulative * scaling_scale + scaling_center
# Convert cumulative fitted values to instantaneous values
fitted_instantaneous <- diff(c(fitted_cumulative_original, NA))  # Add NA to align lengths
# Create a time series object for the fitted instantaneous values
fitted_instantaneous_ts <- ts(
fitted_instantaneous,
start = start(sales_w_ts),
frequency = frequency(sales_w_ts)
)
# Check the fitted instantaneous values
fitted_instantaneous_ts
# Check the fitted instantaneous values
plot(fitted_instantaneous_ts)
# Plot original instantaneous values vs fitted instantaneous values
plot(sales_w_ts, type = "p", col = "blue", pch = 16,
main = "Original vs Fitted Instantaneous Values",
xlab = "Time", ylab = "Instantaneous Values")
# Add the fitted instantaneous values as a line
lines(fitted_instantaneous_ts, col = "red", lwd = 3, lty = 1)
# Add legend
legend("topright", legend = c("Original Instantaneous", "Fitted Instantaneous"),
col = c("blue", "red"), lty = c(NA, 1), pch = c(16, NA), lwd = c(NA, 3))
#### Residuals-----------------------
# Step 1: Extract residuals from the SARIMA model
resid_w <- residuals(sarima_w)
# Step 2: Visualize residuals
# Time series plot of residuals
tsdisplay(resid_w, main = "Residual Diagnostics for SARIMA Model")
# Step 3: Test residuals for stationarity
adf_test <- adf.test(resid_w)
cat("ADF Test p-value:", adf_test$p.value, "\n")
if (adf_test$p.value < 0.05) {
cat("The residuals are stationary.\n")
} else {
cat("The residuals are not stationary.\n")
}
ljung_box_test <- Box.test(resid_w, lag = 20, type = "Ljung-Box")
cat("Ljung-Box Test p-value:", ljung_box_test$p.value, "\n")
if (ljung_box_test$p.value > 0.05) {
cat("The residuals resemble white noise (uncorrelated).\n")
} else {
cat("The residuals show significant autocorrelation.\n")
}
