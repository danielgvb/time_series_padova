# Plot
# Create a data frame for ggplot
plot_data_b <- data.frame(
Time = time(bar_m_ts),
Actual = as.numeric(bar_m_ts),
Fitted_Additive = as.numeric(hw1_b_m$fitted),
Fitted_Multiplicative = as.numeric(hw2_b_m$fitted)
)
# Melt data for easier ggplot usage
plot_data_b_melted <- melt(plot_data_b, id.vars = "Time",
variable.name = "Series",
value.name = "Value")
# Plot using ggplot2
ggplot(plot_data_b_melted, aes(x = Time, y = Value, color = Series)) +
geom_point(data = subset(plot_data_b_melted, Series == "Actual"), size = 2) + # Actual values as dots
geom_line(data = subset(plot_data_b_melted, Series != "Actual"), size = 1) +  # Fitted values as lines
labs(
title = "Actual vs Fitted Values (Bar)",
x = "Time",
y = "Value",
color = "Series"
) +
scale_color_manual(
values = c("Actual" = "black", "Fitted_Additive" = "blue", "Fitted_Multiplicative" = "red"),
labels = c("Actual", "Fitted (Additive)", "Fitted (Multiplicative)")
) +
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_text(face = "bold")
)
# Residuals
residuals_hw1_b_m <- residuals(hw1_b_m)
residuals_hw2_b_m <- residuals(hw2_b_m)
tsdisplay(residuals_hw1_b_m, main = "Residuals: Additive Holt-Winters (Bar)")
tsdisplay(residuals_hw2_b_m, main = "Residuals: Multiplicative Holt-Winters (Bar)")
# Stationarity and Correlation
# Check for stationarity of residuals
# Additive
adf_test_hw1_b_m <- adf.test(residuals_hw1_b_m) # H0: series is non-stationary
print(adf_test_hw1_b_m) # If p-val < alpha, series is stationary
# Multiplicative
adf_test_hw2_b_m <- adf.test(residuals_hw2_b_m) # H0: series is non-stationary
print(adf_test_hw2_b_m) # If p-val < alpha, series is stationary
# Check for autocorrelation in residuals
# Additive
Box.test(residuals_hw1_b_m, lag = 10, type = "Ljung-Box") # H0: residuals are independent
# Multiplicative
Box.test(residuals_hw2_b_m, lag = 10, type = "Ljung-Box") # H0: residuals are independent
# Multiplicative model seems to follow the data better,
# and residuals are slightly better
# Forecast
# Save the forecast of the two models
forecast_hw1_b_m <- forecast(hw1_b_m, h = 12)
forecast_hw2_b_m <- forecast(hw2_b_m, h = 12)
# Forecast plot
# Plot the time series with both forecasts
autoplot(bar_m_ts) +
autolayer(forecast_hw1_b_m$mean, series = "Additive Holt-Winters Forecast (Bar)", PI = F) +
autolayer(forecast_hw2_b_m$mean, series = "Multiplicative Holt-Winters Forecast (Bar)", PI = F) +
ggtitle("Sales Forecast with Holt-Winters Models (Bar)") +
xlab("Time") +
ylab("Sales") +
scale_color_manual(
values = c("Additive Holt-Winters Forecast (Bar)" = "blue",
"Multiplicative Holt-Winters Forecast (Bar)" = "red")
) +
theme_minimal() +
theme(legend.position = "top", legend.title = element_blank())
# Autoplot
autoplot(bar_m_ts) +
autolayer(hw2_b_m, series = "Holt-Winters' Method (Multiplicative, Bar)", PI = F)
# 7. ARIMA Models----------------------------
## 7.1 Standard ARIMA FOOD---------------------------------
## Montly------------------
library(forecast)
plot(food_m_ts)
# see if series is stationary
adf.test(food_m_ts) #H0, series is non-stationary
# p-val > 0.05 => dont reject, non stationary: series is not stationary
adf.test(diff(food_m_ts)) #H0, series is non-stationary
# see the acf and pacf
tsdisplay(diff(food_m_ts))
# PACF suggest AR-1 ?
# ACF suggests MA-1 ?
### Manual ARIMA------------
# ARIMA(p,d,q) = (1,1,0)
arima1_m<- Arima(food_m_ts, order=c(1,1,0))
summary(arima1_m)
# study residual to see if is a good model
resid1_m<- residuals(arima1_m)
tsdisplay(resid1_m)
# Residuals seem stationary
### Auto-ARIMA------------
arima2_m <- auto.arima(food_m_ts)
summary(arima2_m)
summary(arima1_m)
# AIC is almost the same, but keep the AR-1
# study residual to see if is a good model
resid2_m<- residuals(arima2_m)
tsdisplay(resid2_m)
## Weekly------------------
# see if series is stationary
adf.test(food_w_ts) #H0, series is non-stationary
# p-val > 0.05 => dont reject, non stationary: series is not stationary
adf.test(diff(food_w_ts)) # after diff is sationary
# series is stationary
# see the acf and pacf
tsdisplay(diff(food_w_ts))
# PACF suggest AR-1
#ACF suggest ARIMA 1,1,1
### Manual ARIMA------------
# ARIMA(p,d,q) = (1,1,1)
arima1_w<- Arima(food_w_ts, order=c(1,1,1))
summary(arima1_w)
# study residual to see if is a good model
resid1_w<- residuals(arima1_w)
tsdisplay(resid1_w)
# Residuals seem stationary
### Auto-ARIMA------------
arima2_w <- auto.arima(food_w_ts)
summary(arima2_w)
summary(arima1_w)
# Autoarima is better sigthly
# study residual to see if is a good model
resid2_w<- residuals(arima2_w)
tsdisplay(resid2_w)
## Daily------------------
# see if series is stationary
adf.test(food_d_ts) #H0, series is non-stationary
# p-val < 0.05 =>  reject non stationary: series might be stationary
# no need for differencing (?)
# see the acf and pacf
tsdisplay(food_d_ts)
# But has correlation of great order
tsdisplay(diff(food_d_ts))
# ACF and PACF show a lot of seasonality
# try with 2 differences
### Manual ARIMA------------
# ARIMA(p,d,q) = (2,1,0)
arima1_d<- Arima(food_d_ts, order=c(1,1,1))
summary(arima1_d)
# study residual to see if is a good model
resid1_d<- residuals(arima1_d)
tsdisplay(resid1_d)
# Residuals are not stationary - they have autocorrelation
### Auto-ARIMA------------
arima2_d <- auto.arima(food_d_ts)
summary(arima2_d) # order (5,1,5)
summary(arima1_d)
# AIC is better in autoarima
# study residual to see if is a good model
resid2_d<- residuals(arima2_d)
tsdisplay(resid2_d)
# resids have autocorrelation still
## 7.2 Standard ARIMA BAR---------------------------------
## Monthly------------------
plot(bar_m_ts)
# See if series is stationary
adf.test(bar_m_ts) #H0, series is non-stationary
# p-val > 0.05 => dont reject, non stationary: series is not stationary
adf.test(diff(bar_m_ts)) #H0, series is non-stationary
# See the acf and pacf
tsdisplay(diff(bar_m_ts))
tsdisplay(bar_m_ts)
# PACF suggest AR-1
# ACF suggests confirms?
### Manual ARIMA------------
# ARIMA(p,d,q) = (1,1,0)
arima1_b_m <- Arima(bar_m_ts, order = c(1, 1, 0))
summary(arima1_b_m)
# Study residuals to see if it is a good model
resid1_b_m <- residuals(arima1_b_m)
tsdisplay(resid1_b_m)
# Residuals seem stationary
### Auto-ARIMA------------
arima2_b_m <- auto.arima(bar_m_ts)
summary(arima2_b_m) # arima 0,1,0
summary(arima1_b_m)
# AIC is almost the same, but keep the AR-1
# Study residuals to see if it is a good model
resid2_b_m <- residuals(arima2_b_m)
tsdisplay(resid2_b_m)
# better arima 1,1,0
## Weekly------------------
# See if series is stationary
adf.test(bar_w_ts) #H0, series is non-stationary
# p-val > 0.05 => dont reject, non stationary: series is not stationary
adf.test(diff(bar_w_ts)) # after diff is stationary
# Series is stationary
# See the acf and pacf
tsdisplay(diff(bar_w_ts))
# PACF suggest AR-1
# ACF suggest ARIMA 1,1,0
### Manual ARIMA------------
# ARIMA(p,d,q) = (1,1,1)
arima1_b_w <- Arima(bar_w_ts, order = c(1, 1, 0))
summary(arima1_b_w)
# Study residuals to see if it is a good model
resid1_b_w <- residuals(arima1_b_w)
tsdisplay(resid1_b_w)
# Residuals seem stationary
### Auto-ARIMA------------
arima2_b_w <- auto.arima(bar_w_ts)
summary(arima2_b_w)
summary(arima1_b_w)
# Auto-ARIMA is better slightly
# Study residuals to see if it is a good model
resid2_b_w <- residuals(arima2_b_w)
tsdisplay(resid2_b_w)
## Daily------------------
# See if series is stationary
adf.test(bar_d_ts) #H0, series is non-stationary
# p-val < 0.05 => reject non-stationary: series might be stationary
# No need for differencing (?)
# See the acf and pacf
tsdisplay(bar_d_ts)
# But has correlation of great order
tsdisplay(diff(bar_d_ts))
# ACF and PACF show a lot of seasonality
# Try with 2 differences
### Manual ARIMA------------
# ARIMA(p,d,q) = (1,1,1)
arima1_b_d <- Arima(bar_d_ts, order = c(1, 1, 1))
summary(arima1_b_d)
# Study residuals to see if it is a good model
resid1_b_d <- residuals(arima1_b_d)
tsdisplay(resid1_b_d)
# Residuals are not stationary - they have autocorrelation
### Auto-ARIMA------------
arima2_b_d <- auto.arima(bar_d_ts)
summary(arima2_b_d) # Order (5,1,3)
summary(arima1_b_d)
# AIC is better in auto-ARIMA
# Study residuals to see if it is a good model
resid2_b_d <- residuals(arima2_b_d)
tsdisplay(resid2_b_d)
# Residuals have autocorrelation still
## 7.2 SARIMA FOOD----------------------------
## Daily-------------------------
tsdisplay(food_d_ts) #
## 7.2 SARIMA FOOD----------------------------
## Daily-------------------------
tsdisplay(food_d_ts) #
tsdisplay(diff(food_d_ts))
# still not stationary
sarima1_d<- Arima(food_d_ts, order=c(0,1,1), seasonal=c(0,0,1))
# still not stationary
frequency(food_d_ts)
sarima1_d <- Arima(food_d_ts, order = c(1, 1, 1), seasonal = c(0, 1, 1), period = 7)
sarima1_d <- Arima(food_d_ts, order = c(0, 1, 1), seasonal = c(0, 0, 1), period = 7)
sarima1_d<- Arima(food_d_ts,  order = c(0,1,1),seasonal=list(order=c(0,0,1), period=7))
summary(sarima1_d)
sarima1_d <- Arima(food_d_ts, order = c(0, 1, 1), seasonal = c(0, 0, 1), period = 7)
summary(sarima1_d)
sarima1_d<- Arima(food_d_ts,  order = c(0,1,1),seasonal=list(order=c(0,0,1), period=7))
summary(sarima1_d)
sarima1_d<- Arima(food_d_ts,  order = c(0,1,1),seasonal=list(order=c(0,1,1), period=7))
summary(sarima1_d)
sarima1_d<- Arima(food_d_ts,  order = c(0,0,1),seasonal=list(order=c(0,0,1), period=7))
summary(sarima1_d)
sarima1_d<- Arima(food_d_ts,  order = c(0,1,1),seasonal=list(order=c(0,0,1), period=7))
sarima1_d<- Arima(food_d_ts,  order = c(1,1,1),seasonal=list(order=c(0,0,1), period=7))
summary(sarima1_d)
sarima1_d<- Arima(food_d_ts,  order = c(1,1,1),seasonal=list(order=c(0,0,1), period=5)) # period 7 to adjust seasonal behaviour
summary(sarima1_d)
sarima1_d<- Arima(food_d_ts,  order = c(1,1,1),seasonal=list(order=c(0,0,1), period=7)) # period 7 to adjust seasonal behaviour
summary(sarima1_d)
# study residual to see if is a good model
resid1_ds<- residuals(sarima1_d)
tsdisplay(resid1_ds)
# Fit auto.arima with seasonal components
sarima2_d <- auto.arima(food_d_ts, seasonal=TRUE)
summary(sarima2_d)
# model 2 is better, lower AIC
resid2_ds<- residuals(sarima2_d)
tsdisplay(resid2_ds)
tsdisplay(resid2_ds, lag.max = 30)
Box.test(residuals(sarima2_d), lag=30, type="Ljung-Box")
Box.test(residuals(sarima2_d), lag=10, type="Ljung-Box")
Box.test(residuals(sarima2_d), lag=30, type="Ljung-Box")
## 7.3 SARIMA BAR----------------------------
## Daily-------------------------
tsdisplay(bar_d_ts)
tsdisplay(diff(food_d_ts))
tsdisplay(diff(bar_d_ts))
## 7.3 SARIMA BAR----------------------------
## Daily-------------------------
tsdisplay(bar_d_ts, lag.max = 30)
tsdisplay(diff(bar_d_ts), lag.max = 30)
# still not stationary
frequency(bar_d_ts)
sarima1_d<- Arima(bar_d_ts,  order = c(1,1,1),seasonal=list(order=c(0,0,1), period=7)) # period 7 to adjust seasonal behaviour
sarima1_b_d<- Arima(bar_d_ts,  order = c(1,1,1),seasonal=list(order=c(0,0,1), period=7)) # period 7 to adjust seasonal behaviour
summary(sarima1_b_d)
## 7.3 SARIMA BAR----------------------------
## Daily-------------------------
tsdisplay(bar_d_ts, lag.max = 30)
tsdisplay(diff(bar_d_ts), lag.max = 30)
# still not stationary
frequency(bar_d_ts)
sarima1_b_d<- Arima(bar_d_ts,  order = c(1,1,1),seasonal=list(order=c(0,0,1), period=7)) # period 7 to adjust seasonal behaviour
summary(sarima1_b_d)
# study residual to see if is a good model
resid1_b_ds<- residuals(sarima1_b_d)
tsdisplay(resid1_b_ds, lag.max= 30)
# Fit auto.arima with seasonal components
sarima2_b_d <- auto.arima(bar_d_ts, seasonal=TRUE)
summary(sarima2_b_d)
# model 2 is better, lower AIC
resid2_b_ds<- residuals(sarima2_b_d)
tsdisplay(resid2_b_ds, lag.max = 30)
Box.test(residuals(resid2_b_ds), lag=30, type="Ljung-Box")
Box.test(residuals(sarima2_b_d), lag=30, type="Ljung-Box")
# readefine sales_d_ts
head(df_merged_d)
seasonal_food_d_ts <- ts(exp(df_merged_d$sales_cop), frequency=7, start=c(2021, 334))  # 334 is November 30
seasonal_food_d_ts <- ts(exp(df_merged_d$food), frequency=7, start=c(2021, 334))  # 334 is November 30
plot(food_d_ts)
plot(seasonal_food_d_ts)
plot(food_d_ts)
tsdisplay(sales_d_ts,lag.max = 30)
plot(food_d_ts)
plot(seasonal_food_d_ts)
seasonal_food_d_ts <- ts(food_d_ts, frequency=7)  # 334 is November 30
plot(food_d_ts)
plot(seasonal_food_d_ts)
plot(food_d_ts)
plot(seasonal_food_d_ts)
seasonal_food_d_ts <- ts(food_d_ts, frequency=7, start=c(2021, 334))  # 334 is November 30
plot(food_d_ts)
plot(seasonal_food_d_ts)
seasonal_food_d_ts <- ts(food_d_ts, frequency = 7, start = start(food_d_ts))
plot(food_d_ts)
plot(seasonal_food_d_ts)
seasonal_food_d_ts <- ts(food_d_ts, frequency = 365, start = start(food_d_ts))
plot(food_d_ts)
plot(seasonal_food_d_ts)
plot(food_d_ts)
plot(seasonal_food_d_ts)
plot(food_d_ts)
plot(seasonal_food_d_ts)
# re-define food_d_ts
head(df_merged_d)
plot(food_d_ts)
tsdisplay(food_d_ts,lag.max = 30)
# define regresors
# Select specific columns by name
x_regressors_d <- df_merged_d %>% select(rain_sum, fx, tmedian)
length(x_regressors_d)
nrow(x_regressors_d)
nrow(food_d_ts)
length(food_d_ts)
length(food_d_ts) == nrow(x_regressors_d)
# Apply the exponential function to each column
x_regressors_d <- as.data.frame(apply(x_regressors_d, 2, exp))
# Convert to a matrix for ARIMA modeling
x_regressors_d <- as.matrix(x_regressors_d)
# fit the model on sales
# Fit an auto.arima model with seasonal component and external regressors
sarimax_model_d <- auto.arima(
food_d_ts,
seasonal = TRUE,               # Enable seasonal components
xreg = x_regressors_d          # External regressors
)
# Display the summary of the fitted model
summary(sarimax_model_d)
# Validate residuals
checkresiduals(sarimax_model_d)
# set a search for best model
sarimax_model_d3 <- auto.arima(
food_d_ts,
seasonal = TRUE,
xreg = x_regressors_d,
max.p = 5, max.q = 5, max.P = 2, max.Q = 2,
stepwise = FALSE, approximation = FALSE)
# check residuals
checkresiduals(sarimax_model_d3)
# get residuals
resid_sarimax3_seasonal <- residuals(sarimax_model_d3)
# ADF Test for stationarity
adf.test(resid_sarimax3_seasonal)
# get residuals
resid_sarimax3_seasonal <- residuals(sarimax_model_d3)
# ADF Test for stationarity
adf.test(resid_sarimax3_seasonal)
# Ljung-Box Test for autocorrelation
Box.test(resid_sarimax3_seasonal, lag = 10, type = "Ljung-Box")
# ACF and PACF plots
tsdisplay(resid_sarimax3_seasonal, lag.max = 30)
# fit the model on bar
# Fit an auto.arima model with seasonal component and external regressors
sarimax_model_d <- auto.arima(
bar_d_ts,
seasonal = TRUE,               # Enable seasonal components
xreg = x_regressors_d          # External regressors
)
# fit the model on bar
# Fit an auto.arima model with seasonal component and external regressors
sarimax_model_b_d <- auto.arima(
bar_d_ts,
seasonal = TRUE,               # Enable seasonal components
xreg = x_regressors_d          # External regressors
)
# Display the summary of the fitted model
summary(sarimax_model_b_d)
# Validate residuals
checkresiduals(sarimax_model_b_d)
# set a search for best model
sarimax_model_b_d3 <- auto.arima(
bar_d_ts,
seasonal = TRUE,
xreg = x_regressors_d,
max.p = 5, max.q = 5, max.P = 2, max.Q = 2,
stepwise = FALSE, approximation = FALSE)
# check residuals
checkresiduals(sarimax_model_b_d3)
# get residuals
resid_sarimax3_b_seasonal <- residuals(sarimax_model_b_d3)
# ADF Test for stationarity
adf.test(resid_sarimax3_b_seasonal)
# Ljung-Box Test for autocorrelation
Box.test(resid_sarimax3_b_seasonal, lag = 10, type = "Ljung-Box")
# ACF and PACF plots
tsdisplay(resid_sarimax3_b_seasonal, lag.max = 30)
summary(ggm1_f_w) # this one is best model found
summary(ggm1_w) # this one is best model found
summary(ggm1_w) # this one is best model found
pred_GGM_w <- predict(ggm1_w, newx=matrix(1:length(food_w_ts), ncol=1))
pred_GGM_w.inst<- make.instantaneous(pred_GGM_w)
pred_GGM_w.inst
# set same timeframe for GGM preds
start_time_w <- start(food_w_ts)  # Get start time from sales_w_ts
frequency_w <- frequency(food_w_ts)  # Get frequency from sales_w_ts
# Convert pred_GGM to a numeric vector
pred_GGM_w_vec <- unlist(pred_GGM_w.inst)  # Flatten the list to a numeric vector
# Create the time series for pred_GGM
pred_GGM_w_ts <- ts(pred_GGM_w_vec, start = start_time_w, frequency = frequency_w)
plot(sales_w_ts, type= "b",xlab="Week", ylab="Weekly Sales",  pch=16, lty=3, cex=0.6)
lines(pred_GGM_w_ts, col = "red", lty = 2)
plot(pred_GGM_w_ts, col = "red", lty = 2)
plot(food_w_ts, type= "b",xlab="Week", ylab="Weekly Sales",  pch=16, lty=3, cex=0.6)
lines(pred_GGM_w_ts, col = "red", lty = 2)
fit.sales_w <- fitted(ggm1_w)  # Predicted values from the GGM model
if (length(fit.sales_w) != length(sales_w_ts)) {
stop("fit.sales_w and sales_w_ts lengths do not match")
}
fit.food_w <- fitted(ggm1_w)  # Predicted values from the GGM model
fit.food_w <- fitted(ggm1_w)  # Predicted values from the GGM model
if (length(fit.food_w) != length(food_w_ts)) {
stop("lengths do not match")
}
summary(fit.food_w)
length(fit.food_w) == length(cumsum(food_w_ts))  # Should return TRUE
fit.food_w <- scale(fit.food_w) # scale regresor to make convergence
food_w_ts_scaled <- scale(cumsum(food_w_ts))  # Scale the time series because if not will not reach convergence
sarima_w <- Arima(
food_w_ts_scaled,
order = c(1, 0, 1),
seasonal = list(order = c(0, 0, 1), period = 52),
xreg = fit.food_w # this is the GGM fitted values
)
summary(sarima_w)
# get fitted values
# Extract the fitted cumulative values from the SARIMA model
fitted_cumulative <- fitted(sarima_w)
# Reverse scaling transformation to get fitted cumulative values in the original scale
scaling_center <- attr(sales_w_ts_scaled, "scaled:center")
scaling_scale <- attr(sales_w_ts_scaled, "scaled:scale")
# Reverse scaling transformation to get fitted cumulative values in the original scale
scaling_center <- attr(food_w_ts_scaled, "scaled:center")
scaling_scale <- attr(food_w_ts_scaled, "scaled:scale")
fitted_cumulative_original <- fitted_cumulative * scaling_scale + scaling_center
# Convert cumulative fitted values to instantaneous values
fitted_instantaneous <- diff(c(fitted_cumulative_original, NA))  # Add NA to align lengths
# Create a time series object for the fitted instantaneous values
fitted_instantaneous_ts <- ts(
fitted_instantaneous,
start = start(food_w_ts),
frequency = frequency(food_w_ts)
)
# Check the fitted instantaneous values
plot(fitted_instantaneous_ts)
# Plot original instantaneous values vs fitted instantaneous values
plot(sales_w_ts, type = "p", col = "blue", pch = 16,
main = "Original vs Fitted Instantaneous Values",
xlab = "Time", ylab = "Instantaneous Values")
# Add the fitted instantaneous values as a line
lines(fitted_instantaneous_ts, col = "red", lwd = 3, lty = 1)
# Add the fitted instantaneous values as a line
plot(fitted_instantaneous_ts, col = "red", lwd = 3, lty = 1)
# Plot original instantaneous values vs fitted instantaneous values
plot(food_w_ts, type = "p", col = "blue", pch = 16,
main = "Original vs Fitted Instantaneous Values",
xlab = "Time", ylab = "Instantaneous Values")
# Add the fitted instantaneous values as a line
lines(fitted_instantaneous_ts, col = "red", lwd = 3, lty = 1)
# Add legend
legend("topright", legend = c("Original Instantaneous", "Fitted Instantaneous"),
col = c("blue", "red"), lty = c(NA, 1), pch = c(16, NA), lwd = c(NA, 3))
# Add legend
legend("topleft", legend = c("Original Instantaneous", "Fitted Instantaneous"),
col = c("blue", "red"), lty = c(NA, 1), pch = c(16, NA), lwd = c(NA, 3))
# Plot original instantaneous values vs fitted instantaneous values
plot(food_w_ts, type = "p", col = "blue", pch = 16,
main = "Original vs Fitted Instantaneous Values",
xlab = "Time", ylab = "Instantaneous Values")
# Add the fitted instantaneous values as a line
lines(fitted_instantaneous_ts, col = "red", lwd = 3, lty = 1)
# Add legend
legend("topleft", legend = c("Original Instantaneous", "Fitted Instantaneous"),
col = c("blue", "red"), lty = c(NA, 1), pch = c(16, NA), lwd = c(NA, 3))
