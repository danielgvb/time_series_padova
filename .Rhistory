sales <- read_excel("data/sales/sales_dimsum_31102024.xlsx")
sales[is.na(sales)] <- 0 # set to zero na values
# economic variables
eco_growth <- read_excel("data/macroeconomic/economic_activity.xlsx")
fx <- read_excel("data/macroeconomic/fx.xlsx") #Foreign exchange is the conversion of one currency into another
inflation <- read_excel("data/macroeconomic/inflation.xlsx")
unemployment <- read_excel("data/macroeconomic/unemployment.xlsx")
# other variables
google_trends <- read_excel("data/other/google_trends_restaurantes.xlsx")
rain <- read_excel("data/other/rain_proxy.xlsx")
temp <- read_excel("data/other/temperature_data.xlsx")
temp[is.na(temp)] <- 0
rain[is.na(rain)] <- 0
plot(temp$tavg) # no zeros in temp : OK
plot(temp$tmedian) # no zeros in temp : OK- looks better than mean
str(sales)
str(eco_growth)
str(fx) # Foreign exchange is the conversion of one currency into another
str(inflation)
str(unemployment)
str(google_trends)
str(rain)
str(temp) # this has NaNs, must fill somehow
# create time variables
plot(sales$sales_cop)
# sales monthly
df_sales_m <- sales %>%
mutate(month = floor_date(date, "month")) %>% # Extract month
group_by(month) %>%
summarise(sales_m = sum(sales_cop), bar_m = sum(bar), food_m = sum(food)
)     # Summing values
head(df_sales_m)
# sales weekly
df_sales_w <- sales %>%
mutate(week = floor_date(date, "week")) %>% # Extract week
group_by(week) %>%
summarise(sales_w = sum(sales_cop), bar_w = sum(bar), food_w = sum(food))     # Summing values
head(df_sales_w)
# fx
df_fx_m <- fx %>%
mutate(month = floor_date(date, "month")) %>%
group_by(month) %>%
summarise(fx_m = mean(fx))
df_fx_w <- fx %>%
mutate(week = floor_date(date, "week")) %>%
group_by(week) %>%
summarise(fx_w = mean(fx))
head(df_fx_m)
head(df_fx_w)
# google trends
# montly
df_google_m <- google_trends %>%
mutate(month = floor_date(date, "month")) %>%
group_by(month) %>%
summarise(google_m = mean(google_trends))
# weekly
df_google_w <- google_trends %>%
mutate(week = floor_date(date, "week")) %>%
group_by(week) %>%
summarise(google_w = mean(google_trends))
head(df_google_m)
head(df_google_w)
# rain
df_rain_g = rain %>%
group_by(date, region) %>%
summarise(rain_sum=sum(contribution_m3s))
df_rain_g  <- df_rain_g[df_rain_g$region=="ANTIOQUIA",] # filter only Antioquia region
head(df_rain_g)
# montly
df_rain_m <- df_rain_g %>%
mutate(month = floor_date(date, "month")) %>%
group_by(month) %>%
summarise(rain_m = sum(rain_sum))
# weekly
df_rain_w <- df_rain_g %>%
mutate(week = floor_date(date, "week")) %>%
group_by(week) %>%
summarise(rain_w = sum(rain_sum))
head(df_rain_m)
head(df_rain_w)
# temperature
# montly
df_temp_m <- temp %>%
mutate(month = floor_date(date, "month")) %>%
group_by(month) %>%
summarise(temp_m = mean(tavg), prcp_m = sum(prcp))
# weekly
df_temp_w <- temp %>%
mutate(week = floor_date(date, "week")) %>%
group_by(week) %>%
summarise(temp_w = mean(tavg), prcp_w = sum(prcp))
head(df_temp_m)
head(df_temp_w)
#sales, rain, fx are the only ones daily
df_merged_d <- merge(sales, df_rain_g, by = "date", all = FALSE) # Inner join
df_merged_d <- merge(df_merged_d, fx, by = "date", all = FALSE) # Inner join
df_merged_d <- merge(df_merged_d, temp, by = "date", all = FALSE) # Inner join
head(df_merged_d)
df_merged_w <- merge(df_sales_w, df_rain_w, by="week", all=F)
df_merged_w <- merge(df_merged_w, df_google_w, by="week", all=F)
df_merged_w <- merge(df_merged_w, df_fx_w, by="week", all=F)
df_merged_w <- merge(df_merged_w, df_temp_w, by="week", all=F)
head(df_merged_w)
# change colnames before merge
names(eco_growth) <- c("month", "ise")
names(inflation) <- c("month", "inflation")
names(unemployment) <- c("month", "unemployment")
# merge iteratively
df_merged_m <- merge(df_sales_m, df_rain_m, by="month", all=F)
nrow(df_merged_m)
df_merged_m <- merge(df_merged_m, df_fx_m, by="month", all=F)
nrow(df_merged_m)
df_merged_m <- merge(df_merged_m, df_google_m, by="month", all=F)
nrow(df_merged_m)
df_merged_m <- merge(df_merged_m, eco_growth, by="month", all=F)
nrow(df_merged_m)
df_merged_m <- merge(df_merged_m, inflation, by="month", all=F)
nrow(df_merged_m)
df_merged_m <- merge(df_merged_m, unemployment, by="month", all=F)
nrow(df_merged_m)
df_merged_m <- merge(df_merged_m, df_temp_m, by="month", all=F)
nrow(df_merged_m)
objects_to_keep <- c("df_merged_d", "df_merged_w", "df_merged_m")
# Remove all objects except those specified to keep workspace clean
rm(list = setdiff(ls(), objects_to_keep))
# sales daily
ggplot(
df_merged_d,
aes(x=date, y=sales_cop)
) + geom_line() + ggtitle("Daily Sales of Restaurant")
# sales weekly
ggplot(df_merged_w, aes(x=week, y=sales_w)) +
geom_line() + ggtitle("Weekly Sales of Restaurant")
# sales montly
ggplot(df_merged_m, aes(x=month, y=sales_m)) +
geom_line() + ggtitle("Monthly Sales of Restaurant")
#Monthly
# Reshape the data to a long format
df_sales_m_long <- df_merged_m %>%
pivot_longer(cols = c(bar_m, food_m), names_to = "Category", values_to = "Value")
# Create the stacked bar plot
ggplot(df_sales_m_long, aes(x = month, y = Value, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
ggtitle("Monthly Sales of Restaurant") +
labs(y = "Sales", x = "Month", fill = "Category") +
theme_minimal()
# Weekly
# Reshape the data to a long format
df_sales_w_long <- df_merged_w %>%
pivot_longer(cols = c(bar_w, food_w), names_to = "Category", values_to = "Value")
# Create the stacked bar plot
ggplot(df_sales_w_long, aes(x = week, y = Value, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
ggtitle("Weekly Sales of Restaurant") +
labs(y = "Sales", x = "Week", fill = "Category") +
theme_minimal()
# Seasonal plots
df_sales_w_filtered <- df_merged_w %>%
filter(week >= ymd("2021-12-31"))
tseries_w <- ts(df_sales_w_filtered$sales_w , start = c(2022, 1), frequency = 52)
head(tseries_w)
seasonplot(tseries_w, col = rainbow(3), year.labels = TRUE, main = "Seasonal Plot")
text(x = 1, y = max(tseries_w) - 1.5e7, labels = "2024", col = "blue")
# seasonplot monthly
df_sales_m_filtered <- df_merged_m %>%
filter(month >= ymd("2021-12-31"))
tseries_m <- ts(df_sales_m_filtered$sales_m , start = c(2022, 1), frequency = 12)
head(tseries_m)
seasonplot(tseries_m, col = rainbow(3), year.labels = TRUE, main = "Seasonal Plot")
text(x = 1, y = max(tseries_m) - 1e6, labels = "2024", col = "blue")
# Montly Density
# Select the columns of interest
variables <- c("sales_m", "bar_m", "food_m", "rain_m", "fx_m", "google_m",
"ise", "inflation", "unemployment", "temp_m", "prcp_m")
# Transform the data to long format for ggplot2
df_long_m <- df_merged_m %>%
pivot_longer(cols = all_of(variables), names_to = "Variable", values_to = "Value")
# Create the grid of density plots
ggplot(df_long_m, aes(x = Value)) +
geom_density(fill = "blue", alpha = 0.4) +
facet_wrap(~ Variable, scales = "free", ncol = 3) +
labs(title = "Density Plots of Selected Variables",
x = "Value", y = "Density") +
theme_minimal()
# Weekly Density
# Select the columns of interest
variables <- c("sales_w", "bar_w", "food_w", "rain_w", "fx_w", "google_w",
"temp_w", "prcp_w")
df_long_w <- df_merged_w %>%
pivot_longer(cols = all_of(variables), names_to = "Variable", values_to = "Value")
# Create the grid of density plots
ggplot(df_long_w, aes(x = Value)) +
geom_density(fill = "blue", alpha = 0.4) +
facet_wrap(~ Variable, scales = "free", ncol = 3) +
labs(title = "Density Plots of Selected Variables",
x = "Value", y = "Density") +
theme_minimal()
# Daily Density
# Select the columns of interest
variables <- c("sales_cop", "bar", "food", "rain_sum", "fx",
"tmedian", "prcp")
df_long_d <- df_merged_d %>%
pivot_longer(cols = all_of(variables), names_to = "Variable", values_to = "Value")
# Create the grid of density plots
ggplot(df_long_d, aes(x = Value)) +
geom_density(fill = "blue", alpha = 0.4) +
facet_wrap(~ Variable, scales = "free", ncol = 3) +
labs(title = "Density Plots of Selected Variables",
x = "Value", y = "Density") +
theme_minimal()
### Economic Variables--------------------------------
# economic growth
ggplot(df_merged_m, aes(x=month, y=ise)) +
geom_line() + ggtitle("Monthly activity in Colombia")
# clearly seasonal and trend
# fx
ggplot(df_merged_d, aes(x=date, y=fx)) +
geom_line() + ggtitle("Daily COP/USD")
# trend but no clear seasonality
# inflation
ggplot(df_merged_m, aes(x=month, y=inflation)) +
geom_line() + ggtitle("Monthly inflation National")
# business cycles, no tend or seasonality
# unemployment
ggplot(df_merged_m, aes(x=month, y=unemployment)) +
geom_line() + ggtitle("Montly trailing unemployment Medellin")
# seasonal and trend downwards
### Other variables------------------------
# google trends
ggplot(df_merged_w, aes(x=week, y=google_w)) +
geom_line() + ggtitle("Weelkly Google trends 'Restaurantes'")
# no clear behaviour, drop in pandemic
# rain
ggplot(df_merged_d, aes(x=date, y=rain_sum)) +
geom_line() + ggtitle("Daily rain approximated in Antioquia")
# no trend or seasonality clearly
# temperature
ggplot(df_merged_d, aes(x=date, y=tmedian)) +
geom_line() + ggtitle("Daily Median temperature in Medellin")
# almost stationary
# temperature
ggplot(df_merged_d, aes(x=date, y=tavg)) +
geom_line() + ggtitle("Daily Average temperature in Medellin")
# this one looks weird, better keep working on median
# precipitation from temp
ggplot(df_merged_d, aes(x=date, y=prcp)) +
geom_line() + ggtitle("Daily  precipitation in Medellin")
# looks decent
df_merged_d <- subset(df_merged_d, select = -region)
# daily
ggpairs(df_merged_d,
columns = 2:8)
# sales have correl with fx and rain_sum
# weekly
ggpairs(df_merged_w,
columns = 2:9)
# sales have correl with rain, google, fx, temp
# bar has more correl with temp
# montly
ggpairs(df_merged_m,
columns = 2:12)
# Exclude 'date' column
numeric_df_d <- df_merged_d[, sapply(df_merged_d, is.numeric)]
cor_matrix_d <- cor(numeric_df_d, use = "complete.obs")  # Use only complete rows
cor_matrix_d
numeric_df_w <- df_merged_w[, sapply(df_merged_w, is.numeric)]
cor_matrix_w <- cor(numeric_df_w, use = "complete.obs")  # Use only complete rows
cor_matrix_w
numeric_df_m <- df_merged_m[, sapply(df_merged_m, is.numeric)]
cor_matrix_m <- cor(numeric_df_m, use = "complete.obs")  # Use only complete rows
cor_matrix_m
# Plot the Correlation Matrix
par(mfrow=c(1,1))
corrplot(cor_matrix_d, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
corrplot(cor_matrix_w, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
corrplot(cor_matrix_m, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
# drop prcp beacuse they "are the same"
df_merged_m <- df_merged_m %>% select(-prcp_m)
df_merged_w <- df_merged_w %>% select(-prcp_w)
df_merged_d <- df_merged_d %>% select(-prcp)
# drop avg temp, median looks more stable
df_merged_d <- df_merged_d %>% select(-tavg)
colnames(df_merged_d)
### drop everything to clean workspace
objects_to_keep <- c("df_merged_d", "df_merged_w", "df_merged_m")
# Remove all objects except those specified
rm(list = setdiff(ls(), objects_to_keep))
# Vars for model
# Month
# Make sure the `month` column is in POSIXct format
df_merged_m$month <- as.POSIXct(df_merged_m$month)
# Create the numeric variable: an evenly increasing number
df_merged_m <- df_merged_m %>%
arrange(month) %>%  # Ensure data is sorted by month
mutate(numeric_month = row_number())  # Assign an increasing number
# Create the seasonal variable: the 12 different months as a factor
df_merged_m <- df_merged_m %>%
mutate(seasonal_month = factor(format(month, "%B"), levels = month.name))  # Month names as ordered factors
# Week
# Ensure the `week` column is in POSIXct format
df_merged_w$week <- as.POSIXct(df_merged_w$week)
# Create the numeric variable: an evenly increasing number
df_merged_w <- df_merged_w %>%
arrange(week) %>%  # Ensure data is sorted by week
mutate(numeric_week = row_number())  # Assign an increasing number
# Create the seasonal variable: the 12 different months as a factor
df_merged_w <- df_merged_w %>%
mutate(seasonal_month = factor(format(week, "%B"), levels = month.name))  # Month names as ordered factors
# Day
# Ensure the `day` column is in POSIXct format
df_merged_d$date <- as.POSIXct(df_merged_d$date)
# Create the numeric variable: an evenly increasing number
df_merged_d <- df_merged_d %>%
arrange(date) %>%  # Ensure data is sorted by day
mutate(numeric_day = row_number())  # Assign an increasing number
# Create the seasonal variable: the 12 different months as a factor
df_merged_d <- df_merged_d %>%
mutate(seasonal_month = factor(format(date, "%B"), levels = month.name))  # Month names as ordered factors
# Create a column indicating the day of the week
df_merged_d <- df_merged_d %>%
mutate(day_of_week = factor(weekdays(date), levels = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday")))  # Day of the week as ordered factor
# convert to time series
sales_d_ts <- ts(df_merged_d$sales_cop)
sales_w_ts <- ts(df_merged_w$sales_w)
sales_m_ts <- ts(df_merged_m$sales_m)
par(mfrow=c(1,1))
# Daily
tsdisplay(sales_d_ts)
# is not stationary but has no clear trend
# and seasonality every 7 days
# Weekly
tsdisplay(sales_w_ts)
# not stationary: has trend
# Montly
tsdisplay(sales_m_ts)
# has clear trend, no seasonality
# Monthly
df_merged_m <- df_merged_m %>%
mutate(across(where(is.numeric) & !all_of(c("unemployment", "inflation")), ~ log(. + 1))) # add 1 in case there is a zero
# Weekly
df_merged_w <- df_merged_w %>%
mutate(across(where(is.numeric), ~ log(. + 1)))
# Daily
# Weekly
df_merged_d <- df_merged_d %>%
mutate(across(where(is.numeric), ~ log(. + 1)))
# daily
#par(mfrow=c(1,1))
#tsdisplay(sales_d_ts)
# is not stationary but has no clear trend
plot(sales_d_ts)
acf(sales_d_ts)
pacf(sales_d_ts)
# Weekly
#tsdisplay(sales_w_ts)
plot(sales_w_ts)
acf(sales_w_ts)
pacf(sales_w_ts)
# not stationary: has trend and seasonality maybe
# Montly
#tsdisplay(sales_m_ts)
plot(sales_m_ts)
acf(sales_m_ts)
pacf(sales_m_ts)
# has clear trend, no seasonality
## Function to create and summarize models------------------
run_model <- function(formula, data, model_name) {
cat("\nRunning", model_name, "\n")
model <- lm(formula, data = data)
print(summary(model))
par(mfrow = c(2, 2))
plot(model)
return(model)
}
# Function to compare models using ANOVA
compare_models <- function(model1, model2, name1, name2) {
cat("\nComparing Models:", name1, "vs", name2, "\n")
anova_result <- anova(model1, model2)
print(anova_result)
return(anova_result)
}
# Function to add predictions to the dataset
add_predictions <- function(model, data, pred_column) {
data[[pred_column]] <- predict(model, newdata = data)
return(data)
}
# Function to calculate RMSE
calculate_rmse <- function(observed, predicted) {
rmse <- sqrt(mean((observed - predicted)^2, na.rm = TRUE))
return(rmse)
}
# function that compares linear models with R^2 and AIC
get_model_stats <- function(models) {
# Initialize an empty data frame
stats <- data.frame(
Model = character(),
R2 = numeric(),
AIC = numeric(),
stringsAsFactors = FALSE
)
# Loop through the list of models
for (i in seq_along(models)) {
model <- models[[i]]
model_name <- names(models)[i]
# Extract R^2 and AIC
r2 <- summary(model)$r.squared
aic <- AIC(model)
# Append to the data frame
stats <- rbind(stats, data.frame(Model = model_name, R2 = r2, AIC = aic))
}
return(stats)
}
# Montly Models
# View Dataframe
head(df_merged_m)
# Model 0: Trend only
ols0 <- run_model(sales_m ~ numeric_month, df_merged_m, "Model 0")
df_merged_m <- add_predictions(ols0, df_merged_m, "predicted_sales0")
# Model 1: Trend + Seasonality
ols1 <- run_model(sales_m ~ numeric_month + seasonal_month, df_merged_m, "Model 1")
df_merged_m <- add_predictions(ols1, df_merged_m, "predicted_sales1")
## Model 2: Backward Stepwise Regression
# Start with the full model (excluding food and bar)
ols2_full <- lm(
sales_m ~ numeric_month + seasonal_month + unemployment + ise + fx_m +
google_m + temp_m + rain_m,
data = df_merged_m
)
# Perform backward stepwise regression
ols2_stepwise <- step(
ols2_full,
direction = "backward",
trace = 1 # Prints the stepwise regression process
)
# Summary of the final stepwise model
summary(ols2_stepwise)
plot(ols2_stepwise)
# Add predictions from the final stepwise model
df_merged_m <- add_predictions(ols2_stepwise, df_merged_m, "predicted_sales2")
# Plot Actual vs Predicted Values
plot_colors <- c("black", "red", "blue", "darkgreen")
line_types <- c(1, 2, 3,4)  # Solid, dashed, and dotted lines
par(mfrow = c(1,1))
# the base plot for actual sales
plot(
df_merged_m$month, exp(df_merged_m$sales_m),
type = "p",  # Points for actual sales
col = "black", pch = 16,
xlab = "Month",
ylab = "Sales",
main = "Actual vs Predicted Monthly Sales for All Models"
)
# Add the lines for each model
lines(
df_merged_m$month, exp(df_merged_m$predicted_sales0),
col = plot_colors[2],
lty = line_types[2],
lwd = 2
)
lines(
df_merged_m$month, exp(df_merged_m$predicted_sales1),
col = plot_colors[3],
lty = line_types[3],
lwd = 2
)
lines(
df_merged_m$month, exp(df_merged_m$predicted_sales2),
col = plot_colors[4],
lty = 4,
lwd = 2
)
# Add a legend
legend(
"bottomright",
legend = c("Actual Sales", "Model 0", "Model 1", "Model 2 Stepwise"),
col = c("black", plot_colors[2:4]),
lty = c(NA, line_types[2:4]),
pch = c(16, NA, NA, NA),
bty = "n"
)
# Models to compare
models <- list(
"Model trend" = ols0,
"Model trend + season" = ols1,
"Model all covariates step" = ols2_stepwise
)
# Get R^2 and AIC for each model
model_stats <- get_model_stats(models)
#  RMSE calculation for the original (exponentiated) scale
rmse_stats <- data.frame(
Model = character(),
RMSE = numeric(),
stringsAsFactors = FALSE
)
# Loop through each model
for (i in seq_along(models)) {
model_name <- names(models)[i]
predicted_column <- paste0("predicted_sales", i - 1)  # Adjust column name index
# Calculate RMSE on the original scale
rmse <- calculate_rmse(
observed = exp(df_merged_m$sales_m),          # Exponentiate actual values
predicted = exp(df_merged_m[[predicted_column]])  # Exponentiate predicted values
)
# Append results to the RMSE stats table
rmse_stats <- rbind(rmse_stats, data.frame(Model = model_name, RMSE = rmse))
}
# Combine R^2, AIC, and RMSE into one table
combined_stats <- merge(model_stats, rmse_stats, by = "Model")
# View the combined table
print(combined_stats)
summary(ols2_stepwise)
